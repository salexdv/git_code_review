#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = ЭтотОбъект();
	
	ВерсияОбработки = ОбработкаОбъект.СведенияОВнешнейОбработке().Версия;
	
	АдресМакета = ПоместитьВоВременноеХранилище(ПолучитьМакет("src"), Новый УникальныйИдентификатор());
	
	ВидимостьКартыКода = Истина;
	
	Если Объект.КоличествоПоследнихИзменений = 0 Тогда
		Объект.КоличествоПоследнихИзменений = 50;
	КонецЕсли;
	
	ОграничениеПоКоммитам = 10;
	
	ИнициализироватьКартинки();
	ЗаполнитьРезультатыПроверок();
	СформироватьВнутреннююСсылку();
	
	Если Параметры.Свойство("review") Тогда
		ТекущаяСсылка = ВнутренняяСсылка + Параметры.review;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	ТекстОшибки = НСтр("ru = 'Обработка не предназначена для работы в веб-клиенте'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	Возврат;
	#КонецЕсли
	
	ЭтоLinux = ЭтоLinux();
	УправлениеВидимостьюРезультатовПроверки();
	УправлениеВариантомЗагрузкиЗамечанийBSLLS();
	ОпределитьРазделительПути();
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередСтандартнымЗавершениемРаботы(Отказ)
	
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		Отказ = Истина;
		ЗакрытьКонсоль(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
		
		Если ЗавершениеРаботы = Неопределено ИЛИ НЕ ЗавершениеРаботы Тогда
			
			ПередСтандартнымЗавершениемРаботы(Отказ);
			
		Иначе
			
			Если Модифицированность И ЕстьКод() Тогда
				Отказ = Истина;
				СтандартнаяОбработка = Ложь;
				ТекстПредупреждения = "При закрытии весь несохраненный код будет потерян. Всё равно завершить работу?";
			Иначе
				ЗакрытьКонсоль(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КаталогРепозиторияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Обработчик = Новый ОписаниеОповещения("ВыборРепозиторияЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура КоммитыПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрокаКоммита = Элементы.Коммиты.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоммит = Элементы.Коммиты.ТекущиеДанные;
	
	Если ТекущийКоммит <> Неопределено Тогда
		ТекущаяСтрокаКоммита = Элементы.Коммиты.ТекущаяСтрока;
		ТекущийКаталогКонфигурации = ТекущийКоммит.КаталогКонфигурации;
		КоличествоФайлов = ПолучитьКоличествоИзмененныхФайловПоКоммиту(ТекущийКоммит.Хеш);
		Элементы.НачатьCodeReview.Доступность = Ложь;
		Элементы.ОткрытиеРезультата.Доступность = Ложь;
		СостояниеАнализа = "Анализ изменений...";
		Если 25 < КоличествоФайлов Тогда
			ИзмененныеОбъекы.ПолучитьЭлементы().Очистить();
			ИзмененныеФайлы.Очистить();
			Обработчик = Новый ОписаниеОповещения("ВопросДлительногоАнализаФайловЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'В выбранном коммите изменено большое количество файлов. Анализ всех изменений может выполняться продолжительное время. Продолжить?'");
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПодключитьОбработчикОжидания("НачатьАнализИзменений", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененныеОбъекыПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрокаОбъекта = Элементы.ИзмененныеОбъекы.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект = Элементы.ИзмененныеОбъекы.ТекущиеДанные;
	
	Если ТекущийОбъект <> Неопределено Тогда
		
		ТекущаяСтрокаОбъекта = Элементы.ИзмененныеОбъекы.ТекущаяСтрока;
		
		Если ЗначениеЗаполнено(ТекущийОбъект.Файл) Тогда
			КоммитыДляСравнения = ПолучитьКоммитыДляСравнения();
			ВывестиИзмененияОбъекта(ТекущийОбъект, КоммитыДляСравнения);
		Иначе
			ДочерниеОбъекты = ТекущийОбъект.ПолучитьЭлементы();
			Если ДочерниеОбъекты.Количество() = 1 И ЗначениеЗаполнено(ДочерниеОбъекты[0].Файл) Тогда
				КоммитыДляСравнения = ПолучитьКоммитыДляСравнения();
				ВывестиИзмененияОбъекта(ДочерниеОбъекты[0], КоммитыДляСравнения);
			Иначе
				ОчиститьТекстРедактора();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ОчиститьТекстРедактора();
		
	КонецЕсли;
	
	Элементы.ПанельЗамечанияBSLLS.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогРепозиторияПриИзменении(Элемент)
	
	Коммиты.Очистить();
	ИзмененныеОбъекы.ПолучитьЭлементы().Очистить();
	ИзмененныеФайлы.Очистить();
	
	Если ЗначениеЗаполнено(Объект.КаталогРепозитория) Тогда
		ПриИзмененииРепозитория();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПоследнихИзмененийПриИзменении(Элемент)
	
	ПриИзмененииРепозитория();
	
КонецПроцедуры

&НаКлиенте
Процедура АнализироватьТолькоИзменениеКодаПриИзменении(Элемент)
	
	КоммитыПриАктивизацииСтроки(Элементы.Коммиты);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУдалениеРезультатаПроверки(Элемент, ВыбраннаяСтрока)
	
	ПараметрыУдаления = Новый Структура();
	ПараметрыУдаления.Вставить("Идентификатор", Элемент.ТекущиеДанные.Ссылка);
	ПараметрыУдаления.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	Обработчик = Новый ОписаниеОповещения("ВопросУдаленияРезультатаПроверкиЗавершение", ЭтотОбъект, ПараметрыУдаления);
	ТекстВопроса = НСтр("ru = 'Удалить данный результат проверки?'");
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПросмотрРезультатаПроверки(Элемент)
	
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Обработчик = Новый ОписаниеОповещения("ВопросПросмотраРезультатаПроверкиЗавершение", ЭтотОбъект, Ссылка);
	ТекстВопроса = НСтр("ru = 'Открыть просмотр результата проверки?'");
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьИзменениеРезультатаПроверки(Элемент)
	
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Обработчик = Новый ОписаниеОповещения("ВопросИзмененияРезультатаПроверкиЗавершение", ЭтотОбъект, Ссылка);
	ТекстВопроса = НСтр("ru = 'Продолжить выбранный процесс проверки кода?'");
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если 0 < СтрНайти(Поле.Имя, "Удалить") Тогда
		НачатьУдалениеРезультатаПроверки(Элемент, ВыбраннаяСтрока);
	ИначеЕсли 0 < СтрНайти(Поле.Имя, "Просмотреть") Тогда
		НачатьПросмотрРезультатаПроверки(Элемент);
	Иначе
		Если 0 < СтрНайти(Поле.Имя, "Изменить") Тогда
			НачатьИзменениеРезультатаПроверки(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСохраненияРезультатовПроверкиПриИзменении(Элемент)
	
	УправлениеВидимостьюРезультатовПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантФильтраЗамечанийBSLLSПриИзменении(Элемент)
	
	УстановитьФильтрТаблицыЗамечанийBSLLS();
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеBSLLSНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработчик = Новый ОписаниеОповещения("ВыборКаталогаBSLLSЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияBSLLSВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		View().revealLineInCenter(Элемент.ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеBSLLSПриИзменении(Элемент)
	
	ПриИзмененииРасположенияBSLLS();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыводаЗамечанияBSLLSПриИзменении(Элемент)
	
	Элементы.ПанельЗамечанияBSLLS.Видимость = (Объект.ВариантВыводаЗамечанияBSLLS = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗамечанияBSLLSНажатие(Элемент)
	
	Элементы.ПанельЗамечанияBSLLS.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ConsoleOnReady(Элемент)
	
	Если ИсходникиЗагружены Тогда
		
		ДокументЗагружен = Истина;
		
		#Если ВебКлиент Тогда
			Если ВебДокументДоступен() Тогда
				ИнициализацияРедактора();
				АктивироватьДополнительныеФункции();
			Иначе
				ПоказатьПредупреждение(, "К сожалению, в веб-клиенте недоступны практически все функции.
				|Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.");
			КонецЕсли;
		#Иначе
			ИнициализацияРедактора();
			АктивироватьДополнительныеФункции();
		#КонецЕсли
		
		Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
			ОткрытьРезультатПроверкиПоСсылке(ТекущаяСсылка, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(Событие)
	
	Если Событие <> Неопределено Тогда
		
		ИмяСобытия = Событие.event;
		
		Если ИмяСобытия = "EVENT_ON_REVIEW_CHANGED" Тогда
			Замечания = ПолучитьЗамечания();
			КоличествоЗамечаний = View().getReviewIssues().length;
			СтрокаОбъекта = ИзмененныеОбъекы.НайтиПоИдентификатору(Элементы.ИзмененныеОбъекы.ТекущаяСтрока);
			Разница = КоличествоЗамечаний - СтрокаОбъекта.КоличествоЗамечаний;
			СтрокаОбъекта.КоличествоЗамечаний = КоличествоЗамечаний;
			СтрокаОбъекта.Замечания = СериализоватьJSON(Замечания);
			ИзменитьКоличествоЗамечанийВРодительскихСтроках(СтрокаОбъекта.ПолучитьРодителя(), Разница);
			ОбновитьБлокУправленияЗамечаниями();
			Модифицированность = Истина;
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_ON_LINK_CLICK" Тогда
			Если 0 < СтрНайти(Событие.params.href, "e1cib") Тогда
				ПерейтиПоНавигационнойСсылке(Событие.params.href);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		Если ДанныеСобытия.Свойство("href") И ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
			ЗапуститьПриложение(ДанныеСобытия.href);
		Иначе
			ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияРедактора

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ДатаСеанса);
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект);
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект);
	НачатьУдалениеФайлов(Оповещение, КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда		
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда	
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе		
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогВременныхФайлов = ИмяКаталога;
	КаталогИсходников = КаталогВременныхФайлов + "GitCodeReview\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	#Если ВебКлиент Тогда
		HTML = "https://salexdv.github.io/bsl_console/src/index.html";
		ИсходникиЗагружены = Истина;
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		
		ИзвлечьИсходники();
		
	Иначе
		
		#Если ВебКлиент Тогда
			Если ДопПараметры = Неопределено Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтотОбъект);
				НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
			Иначе
				ПоказатьПредупреждение(, "К сожалению работа в веб-клиенте невозможна!");
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияДляРаботыСФайлами(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, Истина);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьДополнительныеФункции()
	
	Элементы.ПодсвечиватьЗапросы.Доступность = Истина;
	Элементы.КартаКода.Доступность = Истина;
	Элементы.СтрокаСостояния.Доступность = Истина;
	Элементы.ОтображатьПробелыИТабуляции.Доступность = Истина;
	Элементы.СледующееРасхождение.Доступность = Истина;
	Элементы.ПредыдущееРасхождение.Доступность = Истина;
	Элементы.ДвухстороннийРежим.Доступность = Истина;
	
	УправлениеВидимостьюКартыКода();
	УправлениеВидимостьюСтрокиСостояния();
	УправлениеВидимостьюПробеловТабуляций();
	УправлениеПодсветкойЗапросов();
	УправлениеДвухстороннимРежимомСравнения();
	
	УстановитьТекст("", Неопределено, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	
	View().init(Инфо.ВерсияПриложения, ИмяПользователя());
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	View().setOption("generateModificationEvent", Истина);
	View().hideScrollX();
	View().hideScrollY();
	View().clearMetadata();
	View().setReadOnly(Истина);
	
	Если ЗначениеЗаполнено(Объект.КаталогРепозитория) Тогда
		ПриИзмененииРепозитория();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция ПолучитьЗамечания()
	
	Замечания = Новый Массив();
	
	Данные = View().getReviewIssues();
	
	Для Каждого ДанныеЗамечания Из Данные Цикл
		Замечание = Новый Структура();
		Замечание.Вставить("date", ДанныеЗамечания.date);
		Замечание.Вставить("author", ДанныеЗамечания.author);
		Замечание.Вставить("severity", ДанныеЗамечания.severity);
		Замечание.Вставить("startLineNumber", ДанныеЗамечания.startLineNumber);
		Замечание.Вставить("endLineNumber", ДанныеЗамечания.endLineNumber);
		Замечание.Вставить("message", ДанныеЗамечания.message);
		Замечания.Добавить(Замечание);
	КонецЦикла;
	
	Возврат Замечания;
	
КонецФункции

&НаКлиенте
Функция View()
	
	Возврат Элементы.ПолеHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекст(Текст, Позиция, УчитыватьОтступПервойСтроки)
	
	View().updateText(Текст);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекст()
	
	Возврат View().getText();
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекстДляСравнения()
	
	Попытка
		Возврат View().editor.getModifiedEditor().getValue();
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОчиститьТекст()
	
	Возврат View().eraseText();
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодсвечиватьЗапросы(Команда)
	
	ПодсвечиватьЗапросы = НЕ ПодсвечиватьЗапросы;
	УправлениеПодсветкойЗапросов();
	
КонецПроцедуры

&НаКлиенте
Процедура КартаКода(Команда)
	
	ВидимостьКартыКода = НЕ ВидимостьКартыКода;
	View().minimap(ВидимостьКартыКода);
	УправлениеВидимостьюКартыКода();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСостояния(Команда)
	
	ВидимостьСтрокиСостояния = НЕ ВидимостьСтрокиСостояния;
	УправлениеВидимостьюСтрокиСостояния();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтображатьПробелыИТабуляции(Команда)
	
	ОтображатьПробелыИТабуляции = НЕ ОтображатьПробелыИТабуляции;
	View().showStatusBar();
	УправлениеВидимостьюПробеловТабуляций();
	
КонецПроцедуры

&НаКлиенте
Процедура ДвухстороннийРежим(Команда)
	
	ДвухстороннийРежим = Не ДвухстороннийРежим;
	УправлениеДвухстороннимРежимомСравнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьНастройки(Команда)
	
	Элементы.ПоказатьСкрытьНастройки.Пометка = Не Элементы.ПоказатьСкрытьНастройки.Пометка;
	УправлениеВидимостьюНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующееРасхождение(Команда)
	
	View().nextDiff();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущееРасхождение(Команда)
	
	View().previousDiff();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуИзменений(Команда)
	
	ПриИзмененииРепозитория();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьCodeReview(Команда)
	
	ЗапуститьCodeReview(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьCodeReview(Команда)
	
	Если СтатусCodeReview = 1 Тогда
	
		Результат = ПолучитьРезультатыCodeReview();
		
		Если Результат.ЕстьЗамечания Тогда
			
			СохранитьИЗакончитьCodeReview(Результат);
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
				ПараметрыУдаления = Новый Структура();
				ПараметрыУдаления.Вставить("Идентификатор", ТекущаяСсылка);
				Обработчик = Новый ОписаниеОповещения("ВопросУдаленияРезультатаПроверкиЗавершение", ЭтотОбъект, ПараметрыУдаления);
				ТекстВопроса = НСтр("ru = 'В редактируемом результате проверки не осталось ни одного замечания. Удалить данный результат?'");
				ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе
				ЗавершитьCodeReview();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗавершитьCodeReview();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СледующееЗамечание(Команда)
	
	View().goNextIssue();
	ОбновитьБлокУправленияЗамечаниями();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущееЗамечание(Команда)
	
	View().goPreviousIssue();
	ОбновитьБлокУправленияЗамечаниями();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатыПроверок(Команда)
	
	ПоказатьСкрытьРезультатыПроверок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатПроверки(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ВводСсылкиРезультатаЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(Обработчик, , "Введите ссылку");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатПроверкиИзФайла(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ВыборФайлаДляОткрытияЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Результат Code Review|*.1crv";
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗамечанияBSLLS(Команда)
	
	Если Не ВыбраныТипыОбрабатываемыхОшибокBSLLS() Тогда
		ТекстОшибки = НСтр("ru = 'В настройках BSL Language Server не указаны типы обрабатываемых ошибок'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗамечания().Количество() = 0 Тогда
		НачатьПолучениеЗамечанийBSLLS();
	Иначе
		Обработчик = Новый ОписаниеОповещения("ВопросОчисткиЗамечанийПриАнализеBSLLS", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В результате анализа все текущие замечания будут удалены. Всё равно продолжить?'");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабатыватьОшибкиBSLLS(Команда)
	
	Объект.ОбрабатыватьОшибкиBSLLS = Не Объект.ОбрабатыватьОшибкиBSLLS;
	УправлениеВариантомЗагрузкиЗамечанийBSLLS();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабатыватьПредупрежденияBSLLS(Команда)
	
	Объект.ОбрабатыватьПредупрежденияBSLLS = Не Объект.ОбрабатыватьПредупрежденияBSLLS;
	УправлениеВариантомЗагрузкиЗамечанийBSLLS();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабатыватьИнформациюBSLLS(Команда)
	
	Объект.ОбрабатыватьИнформациюBSLLS = Не Объект.ОбрабатыватьИнформациюBSLLS;
	УправлениеВариантомЗагрузкиЗамечанийBSLLS();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабатыватьПодсказкиBSLLS(Команда)
	
	Объект.ОбрабатыватьПодсказкиBSLLS = Не Объект.ОбрабатыватьПодсказкиBSLLS;
	УправлениеВариантомЗагрузкиЗамечанийBSLLS();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВетку(Команда)
	
	ТекущаяВетка = "";
	
	Для Каждого КнопкаВетки Из Элементы.ТекущаяВетка.ПодчиненныеЭлементы Цикл
		
		Если КнопкаВетки.Имя = Команда.Имя Тогда
			ТекущаяВетка = КнопкаВетки.Заголовок;
			Элементы.ТекущаяВетка.Заголовок = ТекущаяВетка;
			КнопкаВетки.Пометка = Истина;
		Иначе
			КнопкаВетки.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ПереключитьсяНаВетку(ТекущаяВетка);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеНастройками

&НаКлиенте
Процедура УправлениеВидимостьюНастроек()
	
	Элементы.Настройки.Видимость = Элементы.ПоказатьСкрытьНастройки.Пометка;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции 

&НаКлиенте
Функция ЕстьКод()
	
	Возврат ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ПолучитьТекст()), Символы.ПС, ""));
	
КонецФункции

&НаКлиенте
Функция ПолучитьНазваниеТемыРедактора()
	
	Тема = "bsl-white";
	
	Если ПодсвечиватьЗапросы Тогда
		Тема =  "bsl-white-query";
	КонецЕсли;
	
	Возврат Тема;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьКартинки()
	
	КартинкаДобавлено = КартинкаИзМакета("КартинкаДобавлено");
	КартинкаУдалено = КартинкаИзМакета("КартинкаУдалено");
	КартинкаИзменено = КартинкаИзМакета("КартинкаИзменено");
	КартинкаРоль = КартинкаИзМакета("КартинкаРоль");
	КартинкаПодсистема = КартинкаИзМакета("КартинкаПодсистема");
	КартинкаПодписка = КартинкаИзМакета("КартинкаПодписка");
	КартинкаИнтернет = КартинкаИзМакета("КартинкаИнтернет");
	
КонецПроцедуры

&НаСервере
Функция КартинкаИзМакета(ИмяМакета)
	
	Возврат Новый Картинка(ПолучитьМакет(ИмяМакета));
	
КонецФункции

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПараметрыОповещения = Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль);
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРазделительПути()
	
	РазделительПути = ПолучитьРазделительПути();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьТему()
	
	Тема = ПолучитьНазваниеТемыРедактора();
	View().setTheme(Тема);
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	
	Возврат ЭтотОбъект().ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаКлиенте
Функция ВебДокументДоступен()
	
	Если Элементы.ПолеHTML.Документ <> Неопределено И Элементы.ПолеHTML.Документ.defaultView <> Неопределено Тогда
		Попытка
			ПолучитьТекст();
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	ИндексныйФайл = "";
	
	Если ДопПараметры.СтандартноеЗакрытие Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль(СтандартноеЗакрытие)
	
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		ПараметрыОповещения = Новый Структура("СтандартноеЗакрытие", СтандартноеЗакрытие);
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект, ПараметрыОповещения);
		НачатьУдалениеФайлов(Оповещение, ИндексныйФайл);
	Иначе
		Если СтандартноеЗакрытие Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКартыКода()
	
	Элементы.КартаКода.Пометка = ВидимостьКартыКода;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтрокиСостояния()
	
	Элементы.СтрокаСостояния.Пометка = ВидимостьСтрокиСостояния;
	
	Если ВидимостьСтрокиСостояния Тогда
		View().showStatusBar();
	Иначе
		View().hideStatusBar();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УправлениеВидимостьюПробеловТабуляций()

	Элементы.ОтображатьПробелыИТабуляции.Пометка = ОтображатьПробелыИТабуляции;
	View().renderWhitespace(ОтображатьПробелыИТабуляции);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДвухстороннимРежимомСравнения()

	Элементы.ДвухстороннийРежим.Пометка = ДвухстороннийРежим;
	Текст = ПолучитьТекстДляСравнения();
	ТекущаяСтрока = View().getCurrentLine();
	View().compare(Текст, ДвухстороннийРежим, Истина);
	View().revealLineInCenter(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПодсветкойЗапросов()
	
	Элементы.ПодсвечиватьЗапросы.Пометка = ПодсвечиватьЗапросы;
	ПереключитьТему();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБлокУправленияЗамечаниями()
	
	КоличествоЗамечаний = View().getReviewIssues().length;
	НомерЗамечания = View().currentIssue + 1;
	
	ЕстьЗамечания = (0 < КоличествоЗамечаний);
	Элементы.СчетчикЗамечаний.Видимость = ЕстьЗамечания;
	Элементы.УправлениеЗамечаниями.Доступность = ЕстьЗамечания;
	
	Если ЕстьЗамечания Тогда
		СчетчикЗамечаний = СтрШаблон("%1 из %2", НомерЗамечания, КоличествоЗамечаний);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоLinux()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();

	Возврат (0 < Найти(Строка(СистемнаяИнформация.ТипПлатформы), "Linux"));
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекстВыводаКоманды(Вывод, ПоследовательноеЧтение = Ложь)
	
	Текст = "";
	
	Если ПоследовательноеЧтение Тогда
		Чтение = Новый ЧтениеТекста(Вывод, КодировкаТекста.UTF8);
		Строка = Чтение.ПрочитатьСтроку();
		Пока Строка <> Неопределено Цикл
			Текст = Текст + Строка + Символы.ПС;
			Строка = Чтение.ПрочитатьСтроку();
		КонецЦикла;
	Иначе
		Чтение = Новый ТекстовыйДокумент();
		Чтение.Прочитать(Вывод, КодировкаТекста.UTF8);
		Текст = Чтение.ПолучитьТекст();
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Функция ЗапуститьКоманду(Команда, Знач Каталог)
	
	КодВозврата = 0;
	Вывод = ПолучитьИмяВременногоФайла();
	ПолнаяКоманда = СтрШаблон("%1 > %2", Команда, Вывод);
	
	Если ЭтоLinux Тогда
		ЗапуститьПриложение(ПолнаяКоманда, Каталог, Истина, КодВозврата);
	Иначе
		Попытка
			Shell = Новый COMОбъект("WScript.Shell");
			Диск = Лев(Каталог, 2);
			Каталог = СтрЗаменить(Каталог, "\", "\\");
			ПолнаяКоманда = СтрШаблон("cmd /c %1 & cd %2 & %3", Диск, Каталог, СтрЗаменить(ПолнаяКоманда, "\", "\\"));
			КодВозврата = Shell.Run(ПолнаяКоманда, 0, Истина);
		Исключение
			ЗапуститьПриложение(ПолнаяКоманда, Каталог, Истина, КодВозврата);
		КонецПопытки;
	КонецЕсли;
	
	ТекстВывода = ПолучитьТекстВыводаКоманды(Вывод);
	УдалитьФайлы(Вывод);
	
	Результат = Новый Структура();
	Результат.Вставить("КодВозврата", КодВозврата);
	Результат.Вставить("ТекстВывода", ТекстВывода);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Git

&НаКлиенте
Функция ЗапуститьКомандуGit(Команда)
	
	Возврат ЗапуститьКоманду("git " + Команда, Объект.КаталогРепозитория);

КонецФункции

&НаКлиенте
Функция ДополнитьКомментарий(СуществующийКомментарий, Добавка)
	
	Комментарий = СуществующийКомментарий;
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Комментарий = Комментарий + Символы.ПС;
	КонецЕсли;
	
	Комментарий = Комментарий + Добавка;
	
	Возврат Комментарий;
	
КонецФункции

&НаКлиенте
Функция ДатаЛога(СтрокаДаты)
	
	Значение = СокрЛП(СтрЗаменить(СтрокаДаты, "Date:", ""));
	
	Попытка
		Возврат Дата(Значение);
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуКоммитов() Экспорт
	
	Команда = СтрШаблон("log -%1 --pretty=medium --date=format:%2", Формат(Объект.КоличествоПоследнихИзменений, "ЧГ=0"), "%Y%m%d%H%M%S");
	Результат = ЗапуститьКомандуGit(Команда);
	
	Если Результат.КодВозврата = 0 Тогда
		
		Коммиты.Очистить();
		СтрокаТаблицы = Неопределено;
		СтрокВЛоге = СтрЧислоСтрок(Результат.ТекстВывода);
		КаталогКонфигурацииОпределен = Ложь;
		
		Для НомерСтроки = 1 По СтрокВЛоге Цикл
			
			Строка = СокрЛП(СтрПолучитьСтроку(Результат.ТекстВывода, НомерСтроки));
			
			Если СтрНачинаетсяС(Строка, "commit") Тогда
				СтрокаТаблицы = Коммиты.Добавить();
				СтрокаТаблицы.Хеш = СтрЗаменить(Строка, "commit ", "");
				ЗаполнитьВерсиюХранилища(СтрокаТаблицы);
				КаталогКонфигурацииОпределен = Макс(КаталогКонфигурацииОпределен, ЗначениеЗаполнено(СтрокаТаблицы.КаталогКонфигурации));
			ИначеЕсли СтрНачинаетсяС(Строка, "Author") Тогда
				СтрокаТаблицы.Автор = СтрЗаменить(Строка, "Author: ", "");
			ИначеЕсли СтрНачинаетсяС(Строка, "Date") Тогда
				СтрокаТаблицы.Дата = ДатаЛога(Строка)
			Иначе
				СтрокаТаблицы.Комментарий = ДополнитьКомментарий(СтрокаТаблицы.Комментарий, Строка);
			КонецЕсли;
			
			Прогресс = НомерСтроки / СтрокВЛоге * 100;
			Состояние(СостояниеАнализа, Прогресс);
			ОбработкаПрерыванияПользователя();
			
		КонецЦикла;
		
		Если Не КаталогКонфигурацииОпределен Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось определить каталог конфигурации 1С'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось получить список коммитов:%1%2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Символы.ПС, Результат.ТекстВывода);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.КаталогРепозитория");
	КонецЕсли;
	
	Состояние();
	СостояниеАнализа = "";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФорматированноеИмяВетки(ИмяВетки)
	
	Имя = ИмяВетки;
	
	НедопустимыеСимволы = Новый Массив();
	НедопустимыеСимволы.Добавить("/");
	НедопустимыеСимволы.Добавить("~");
	НедопустимыеСимволы.Добавить("`");
	НедопустимыеСимволы.Добавить("\");
	НедопустимыеСимволы.Добавить("'");
	НедопустимыеСимволы.Добавить("%");
	НедопустимыеСимволы.Добавить(";");
	НедопустимыеСимволы.Добавить(":");
	НедопустимыеСимволы.Добавить("?");
	НедопустимыеСимволы.Добавить("*");
	НедопустимыеСимволы.Добавить("(");
	НедопустимыеСимволы.Добавить(")");
	НедопустимыеСимволы.Добавить("&");
	НедопустимыеСимволы.Добавить("#");
	НедопустимыеСимволы.Добавить("@");
	НедопустимыеСимволы.Добавить("!");
	НедопустимыеСимволы.Добавить("-");
	НедопустимыеСимволы.Добавить("+");
	НедопустимыеСимволы.Добавить(" ");
	
	Индекс = 0;
	
	Пока Индекс < НедопустимыеСимволы.Количество() Цикл
		Символ = НедопустимыеСимволы[Индекс];
		Дополнение = СтроковыеФункцииКлиентСервер.ДополнитьСтроку("_", Индекс + 1, "_");
		Имя = СтрЗаменить(Имя, Символ, Дополнение);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Имя;
	
КонецФункции

&НаСервере
Процедура УдалитьКнопкиИКомандыВеток()
	
	Пока 0 < Элементы.ТекущаяВетка.ПодчиненныеЭлементы.Количество() Цикл
		КнопкаВетки = Элементы.ТекущаяВетка.ПодчиненныеЭлементы.Получить(0);
		Команды.Удалить(Команды.Найти(КнопкаВетки.Имя));
		Элементы.Удалить(КнопкаВетки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиВеток(ТекстВывода)
	
	УдалитьКнопкиИКомандыВеток();
	
	СоответстиеВеток = Новый Соответствие();
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстВывода) Цикл
		
		ТекущаяВетка = Ложь;
		ИмяВетки = СокрЛ(СтрПолучитьСтроку(ТекстВывода, НомерСтроки));
		
		Если СтрНачинаетсяС(ИмяВетки, "*") Тогда
			ТекущаяВетка = Истина;
			ИмяВетки = Сред(ИмяВетки, 3);
		КонецЕсли;
		
		ФорматированноеИмя = ПолучитьФорматированноеИмяВетки(ИмяВетки);
		ИмяКнопки = "Ветка_" + ФорматированноеИмя;
		
		Попытка
			Команда = Команды.Добавить(ИмяКнопки);
			Команда.Действие = "ВыбратьВетку";
			Кнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ТекущаяВетка);
			Кнопка.ИмяКоманды = ИмяКнопки;
			Кнопка.Заголовок = ИмяВетки;
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось создать кнопку для ветки с именем ""%1"". '"); 
			ТекстОшибки = ТекстОшибки + НСтр("ru = 'Возможно, имя ветки содержит недопустимые символы'"); 
			ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяВетки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецПопытки;
		
		СоответстиеВеток[ИмяКнопки] = ИмяКнопки;
		
		Если ТекущаяВетка Тогда
			Кнопка.Пометка = Истина;
			Элементы.ТекущаяВетка.Заголовок = ИмяВетки;
		КонецЕсли;
		
	КонецЦикла;
	
	Ветки = Новый ФиксированноеСоответствие(СоответстиеВеток);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеТаблицыКоммитов()
	
	СостояниеАнализа = "Получение списка изменений...";
	ПодключитьОбработчикОжидания("ЗаполнитьТаблицуКоммитов", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВеток() Экспорт
	
	Результат = ЗапуститьКомандуGit("branch --list");
	Если 0 < Результат.КодВозврата Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось получить список веток репозитория:%1%2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Символы.ПС, Результат.ТекстВывода);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.КаталогРепозитория");
	Иначе
		СоздатьКнопкиВеток(Результат.ТекстВывода);
		НачатьЗаполнениеТаблицыКоммитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРепозитория()
	
	Каталог = Новый Файл(Объект.КаталогРепозитория);
	
	Если Каталог.Существует() Тогда
		Результат = ЗапуститьКомандуGit("status");
		Если 0 < Результат.КодВозврата Тогда
			ТекстОшибки = НСтр("ru = 'Выбранный каталог не является репозиторием git'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.КаталогРепозитория");
		Иначе
			СостояниеАнализа = "Получение списка веток...";
			ПодключитьОбработчикОжидания("ЗаполнитьСписокВеток", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьсяНаВетку(ИмяВетки)
	
	Команда = СтрШаблон("checkout %1", ИмяВетки);
	Результат = ЗапуститьКомандуGit(Команда);
	Если 0 < Результат.КодВозврата Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось переключиться на ветку ""%1""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяВетки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	Иначе
		НачатьЗаполнениеТаблицыКоммитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРепозиторияЗавершение(Каталог, ДопПараметры) Экспорт
	
	Если Каталог <> Неопределено И 0 < Каталог.Количество() Тогда
		Объект.КаталогРепозитория = Каталог[0];
		КаталогКонфигурации = "";
		ПриИзмененииРепозитория();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьКаталогКонфигурации(ХешКоммита)
	
	КаталогКонфигурации = "";
	КомандаПоиска = "findstr";
	
	Если ЭтоLinux Тогда
		КомандаПоиска = "grep";
	КонецЕсли;
	
	Команда = СтрШаблон("ls-tree -r %1 --name-only | %2 Configuration.xml", ХешКоммита, КомандаПоиска);
	Результат = ЗапуститьКомандуGit(Команда);
	
	Если Результат.КодВозврата = 0 И ЗначениеЗаполнено(Результат.ТекстВывода) Тогда
		ЧастиПути = СтрРазделить(Результат.ТекстВывода, "/");
		ЧастиПути.Удалить(ЧастиПути.Количество() - 1);
		КаталогКонфигурации = СтрСоединить(ЧастиПути, "/") + "/";
	КонецЕсли;
	
	Возврат КаталогКонфигурации;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВерсиюХранилищаИзФайла(Файл, ХешКоммита)
	
	ВерсияХранилища = 0;
	ВерсияФайла = ПолучитьВерсиюФайла(Файл, Новый Структура("Хеш", ХешКоммита));
	НачалоТега = СтрНайти(ВерсияФайла, "<VERSION>");
	КонецТега = СтрНайти(ВерсияФайла, "</VERSION>");
	
	Если 0 < НачалоТега И 0 < КонецТега Тогда
		Значение = Сред(ВерсияФайла, НачалоТега + 9, КонецТега - НачалоТега - 9);
		ВерсияХранилища = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
	КонецЕсли;
	
	Возврат ВерсияХранилища;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВерсиюХранилища(СтрокаТаблицы)
	
	ВерсияХранилища = 0;
	ХешКоммита = СтрокаТаблицы.Хеш;
	
	Файлы = Новый Массив();
	
	КаталогКонфигурации = "";
	ПредыдущийИдентификатор = СтрокаТаблицы.ПолучитьИдентификатор() - 1;
	ПредыдущаяСтрока = Коммиты.НайтиПоИдентификатору(ПредыдущийИдентификатор);
	
	Если ПредыдущаяСтрока <> Неопределено И ЗначениеЗаполнено(ПредыдущаяСтрока.КаталогКонфигурации) Тогда
		КаталогКонфигурации = ПредыдущаяСтрока.КаталогКонфигурации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КаталогКонфигурации) Тогда
		КаталогКонфигурации = ОпределитьКаталогКонфигурации(ХешКоммита);
	КонецЕсли;
	
	Если Объект.ОпределятьВерсиюХранилища И ЗначениеЗаполнено(КаталогКонфигурации) Тогда
		ВерсияХранилища = ПолучитьВерсиюХранилищаИзФайла(КаталогКонфигурации + "VERSION", ХешКоммита);
	КонецЕсли;
	
	СтрокаТаблицы.Версия = ВерсияХранилища;
	СтрокаТаблицы.КаталогКонфигурации = КаталогКонфигурации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИзмененныеФайлыПоКоммиту(ХешКоммита)
	
	Файлы = Новый Массив;
	
	Команда = СтрШаблон("show --pretty=format: --name-only %1", ХешКоммита);
	Результат = ЗапуститьКомандуGit(Команда);
		
	Если Результат.КодВозврата = 0 Тогда
		Для НомерСтроки = 1 По СтрЧислоСтрок(Результат.ТекстВывода) Цикл
			Файл = СтрПолучитьСтроку(Результат.ТекстВывода, НомерСтроки);
			Файлы.Добавить(Файл);
		КонецЦикла;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось получить список измененных файлов:%1%2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Символы.ПС, Результат.ТекстВывода);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКоличествоИзмененныхФайловПоКоммиту(ХешКоммита)
	
	КоличествоФайлов = 0;
	Команда = СтрШаблон("show --pretty=format: --name-only %1", ХешКоммита);
	Результат = ЗапуститьКомандуGit(Команда);
	
	Если Результат.КодВозврата = 0 Тогда
		КоличествоФайлов = СтрЧислоСтрок(Результат.ТекстВывода);
	КонецЕсли;
	
	Возврат КоличествоФайлов;
	
КонецФункции

&НаКлиенте
Функция ВозможнаОшибкаВКодировке(Файл)
	
	Возврат 0 < СтрНайти(Файл, "\");
	
КонецФункции

&НаКлиенте
Функция ПолучитьВерсиюФайла(ИмяФайла, Коммит)
	
	Версия = "";
	
	Если Коммит <> Неопределено Тогда
		
		Команда = СтрШаблон("show %1:%2", Коммит.Хеш, ИмяФайла);
		Результат = ЗапуститьКомандуGit(Команда);
		
		Если Результат.КодВозврата = 0 Тогда
			Возврат Результат.ТекстВывода;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКоммитыДляСравнения()
	
	Если Элементы.Коммиты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Конецесли;
	
	КоммитыДляСравнения = Новый Структура();
	
	ТекущаяВерсия = МинимальноеЗначениеВМассиве(Элементы.Коммиты.ВыделенныеСтроки);
	КоммитыДляСравнения.Вставить("ТекущаяВерсия", Коммиты.НайтиПоИдентификатору(ТекущаяВерсия));
	
	ПредыдущаяВерсия = МаксимальноеЗначениеВМассиве(Элементы.Коммиты.ВыделенныеСтроки);
	ПоследнийИдентификатор = Коммиты[Коммиты.Количество()-1].ПолучитьИдентификатор();
	
	Если ПредыдущаяВерсия < ПоследнийИдентификатор Тогда
		ПредыдущаяВерсия = ПредыдущаяВерсия + 1;
		КоммитыДляСравнения.Вставить("ПредыдущаяВерсия", Коммиты.НайтиПоИдентификатору(ПредыдущаяВерсия));
	Иначе
		ПредыдущаяВерсия = -1;
		КоммитыДляСравнения.Вставить("ПредыдущаяВерсия", Неопределено);
	КонецЕсли;
	
	УчитываемыеКоммиты = Новый Массив();
	
	Граница = ПредыдущаяВерсия;
	
	Если Граница < 0 Тогда
		Граница =  ПоследнийИдентификатор;
	КонецЕсли;
	
	НачальныйКоммит = ТекущаяВерсия;
	
	Пока НачальныйКоммит < Граница Цикл
		УчитываемыеКоммиты.Добавить(Коммиты.НайтиПоИдентификатору(НачальныйКоммит));
		НачальныйКоммит = НачальныйКоммит + 1;
	КонецЦикла;
	
	КоммитыДляСравнения.Вставить("УчитываемыеКоммиты", УчитываемыеКоммиты);
	КоммитыДляСравнения.Вставить("ПроанализированныеФайлы", Новый Соответствие);
	
	Возврат КоммитыДляСравнения;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВерииФайла(Файл, КоммитыДляСравнения)
	
	ТекстТекущейВерсии = ПолучитьВерсиюФайла(Файл, КоммитыДляСравнения.ТекущаяВерсия);
	ТекстПредыдущейВерсии = ПолучитьВерсиюФайла(Файл, КоммитыДляСравнения.ПредыдущаяВерсия);
	
	Результат = Новый Структура("ТекущаяВерсия, ПредыдущаяВерсия", ТекстТекущейВерсии, ТекстПредыдущейВерсии);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АнализИзмененийGit

&НаКлиенте
Функция МаксимальноеЗначениеВМассиве(Массив)
	
	Максимум = 0;
	
	Для Индекс = 0 По Массив.Количество() - 1 Цикл
		Максимум = Макс(Максимум, Массив[Индекс]);
	КонецЦикла;
	
	Возврат Максимум;
	
КонецФункции

&НаКлиенте
Функция МинимальноеЗначениеВМассиве(Массив)
	
	Минимум = 9999999;
	
	Для Индекс = 0 По Массив.Количество() - 1 Цикл
		Минимум = Мин(Минимум, Массив[Индекс]);
	КонецЦикла;
	
	Возврат Минимум;
	
КонецФункции

&НаКлиенте
Функция НужноОбрабатыватьИзмененныйФайл(Файл)
	
	Обрабатывать = Ложь;
	ИмяФайла = НРег(Файл);
	
	Если СтрЗаканчиваетсяНа(ИмяФайла, ".bsl") Тогда
		Обрабатывать = Истина;
	ИначеЕсли СтрЗаканчиваетсяНа(ИмяФайла, ".mxl") Тогда
		Обрабатывать = Истина;
	Иначе
		Если СтрЗаканчиваетсяНа(ИмяФайла, ".xml") Тогда
			Если СтрНайти(ИмяФайла, "configdumpinfo.xml") = 0 И
					СтрНайти(ИмяФайла, "configuration.xml") = 0 И
					СтрНайти(ИмяФайла, "ext/") = 0 И
					СтрНайти(ИмяФайла, "interfaces/") = 0 Тогда
				Обрабатывать = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Обрабатывать;
	
КонецФункции

&НаКлиенте
Функция ОпределитьИмяОбъектаМетаданных(Имя)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("Subsystems", "01.Подсистема");
	СоответствиеИмен.Вставить("CommonModules", "02.ОбщийМодуль");
	СоответствиеИмен.Вставить("SessionParameters", "03.ПараметрСеанса");
	СоответствиеИмен.Вставить("Roles", "04.Роль");
	СоответствиеИмен.Вставить("ExchangePlans", "05.ПланОбмена");
	СоответствиеИмен.Вставить("FilterCriteria", "06.КритерийОтбора");
	СоответствиеИмен.Вставить("EventSubscriptions", "07.ПодпискаНаСобытие");
	СоответствиеИмен.Вставить("ScheduledJobs", "08.РегламентноеЗадание");
	СоответствиеИмен.Вставить("FunctionalOptions", "09.ФункциональнаяОпция");
	СоответствиеИмен.Вставить("FunctionalOptionsParameters", "10.ПараметрФункциональнойОпции");
	СоответствиеИмен.Вставить("DefinedTypes", "11.ОпределяемыйТип");
	СоответствиеИмен.Вставить("SettingsStorages", "12.ХранилищеНастроек");
	СоответствиеИмен.Вставить("CommonCommands", "13.ОбщаяКоманда");
	СоответствиеИмен.Вставить("CommandGroups", "14.ГруппаКоманд");
	СоответствиеИмен.Вставить("CommonForms", "15.ОбщаяФорма");
	СоответствиеИмен.Вставить("CommonTemplates", "16.ОбщийМакет");
	СоответствиеИмен.Вставить("CommonPictures", "17.ОбщаяКартинка");
	СоответствиеИмен.Вставить("XDTOPackages", "18.XDTOПакет");
	СоответствиеИмен.Вставить("WebServices", "19.WebСервис");
	СоответствиеИмен.Вставить("HTTPServices", "20.HTTPСервис");
	СоответствиеИмен.Вставить("WSReferences", "21.WSСсылка");
	СоответствиеИмен.Вставить("StyleItems", "22.ЭлементСтиля");
	СоответствиеИмен.Вставить("Styles", "23.Стиль");
	СоответствиеИмен.Вставить("Languages", "24.Язык");
	СоответствиеИмен.Вставить("Constants", "25.Константа");
	СоответствиеИмен.Вставить("Catalogs", "26.Справочник");
	СоответствиеИмен.Вставить("Documents", "27.Документ");
	СоответствиеИмен.Вставить("DocumentNumerators", "28.Нумератор");
	СоответствиеИмен.Вставить("Sequences", "29.Последовательность");
	СоответствиеИмен.Вставить("DocumentJournals", "30.ЖурналДокументов");
	СоответствиеИмен.Вставить("Enums", "31.Перечисление");
	СоответствиеИмен.Вставить("Reports", "32.Отчет");
	СоответствиеИмен.Вставить("DataProcessors", "33.Обработка");
	СоответствиеИмен.Вставить("ChartsOfCharacteristicTypes", "34.ПланВидовХарактеристик");
	СоответствиеИмен.Вставить("ChartsOfAccounts", "35.ПланСчетов");
	СоответствиеИмен.Вставить("ChartsOfCalculationTypes", "36.ПланВидовРасчета");
	СоответствиеИмен.Вставить("InformationRegisters", "37.РегистрСведений");
	СоответствиеИмен.Вставить("CommonAttributes", "38.РегистрНакопления");
	СоответствиеИмен.Вставить("AccountingRegisters", "39.РегистрБухгалтерии");
	СоответствиеИмен.Вставить("AccumulationRegisters", "40.РегистрНакопления");
	СоответствиеИмен.Вставить("CalculationRegisters", "41.РегистрРасчета");
	СоответствиеИмен.Вставить("BusinessProcesses", "42.БизнесПроцесс");
	СоответствиеИмен.Вставить("Tasks", "43.Задача");
	СоответствиеИмен.Вставить("ExternalDataSources", "44.ВнешнийИсточникДанных");
	
	Возврат СоответствиеИмен[Имя];
	
КонецФункции

&НаКлиенте
Функция ПолучитьПутьИзмененийПоИмениФайла(Файл)
	
	Путь = СтрЗаменить(Файл, ТекущийКаталогКонфигурации, "");
	Путь = Лев(Путь, СтрДлина(Путь) - 4);
	
	ЧастиПути = СтрРазделить(Путь, "/");
	ЧастиБезИмени = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ЧастиПути);
	ЧастиБезИмени.Удалить(0);
	ЧастиБезИмени.Удалить(0);
	
	Если 0 < ЧастиБезИмени.Количество() Тогда
		ПутьБезИмени = СтрСоединить(ЧастиБезИмени, ".");
		ПутьБезИмени = СтрЗаменить(ПутьБезИмени, "Form.", "");
		ПутьБезИмени = СтрЗаменить(ПутьБезИмени, "Ext.", "");
		Возврат СтрШаблон("%1.%2.%3", ЧастиПути[0], ЧастиПути[1], ПутьБезИмени);
	Иначе
		Возврат СтрЗаменить(Путь, "/", ".");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеТипаРеквизита(Тип)
	
	Описание = "";
	
	Для Каждого Свойство Из Тип.Свойства() Цикл
		
		Описание = Описание + Свойство.Имя + "_";
		Попытка
			ЗначениеСвойства = Тип.Получить(Свойство);
		Исключение
			ЗначениеСвойства = Тип.ПолучитьСписок(Свойство);
		КонецПопытки;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			Описание = Описание + ПолучитьОписаниеТипаРеквизита(ЗначениеСвойства);
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			Для Каждого ЭлементСписка Из ЗначениеСвойства Цикл
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Описание = Описание + ПолучитьОписаниеТипаРеквизита(ЭлементСписка);
				Иначе
					Описание = Описание + ЭлементСписка;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Описание = Описание + ЗначениеСвойства;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьРеквизитОбъектаИзXML(Реквизиты, Реквизит)
	
	ИмяРеквизита = Реквизит.Получить("Properties/Name");
	Реквизиты.ПоИмени.Добавить(ИмяРеквизита);
	ОписаниеТипа = ПолучитьОписаниеТипаРеквизита(Реквизит.Получить("Properties/Type"));
	Реквизиты.ПоТипу.Добавить(ИмяРеквизита + "|" + ОписаниеТипа);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивРеквизитовОбъектаИзXML(ОбъектXDTO, ИмяУзлаРеквизитов)
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("ПоИмени", Новый Массив);
	Реквизиты.Вставить("ПоТипу", Новый Массив);
	
	Попытка
		СписокРеквизитов = ОбъектXDTO.ПолучитьСписок(ИмяУзлаРеквизитов);
		Для Каждого Реквизит Из СписокРеквизитов Цикл
			ПрочитатьРеквизитОбъектаИзXML(Реквизиты, Реквизит);
		КонецЦикла;
	Исключение
		Попытка
			Реквизит = ОбъектXDTO.Получить(ИмяУзлаРеквизитов);
			ПрочитатьРеквизитОбъектаИзXML(Реквизиты, Реквизит);
		Исключение
			Реквизиты = Неопределено;
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	Возврат Реквизиты;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивТабличныхЧастейОбъектаИзXML(ОбъектXDTO)
	
	МассивТЧ = Новый Массив();
	
	Попытка
		
		СписокТЧ = ОбъектXDTO.ПолучитьСписок("TabularSection");
		
		Для Каждого ТабличнаяЧасть Из СписокТЧ Цикл
			ДанныеТЧ = Новый Структура();
			ДанныеТЧ.Вставить("Имя", ТабличнаяЧасть.Получить("Properties/Name"));
			Реквизиты = ПолучитьМассивРеквизитовОбъектаИзXML(ТабличнаяЧасть, "ChildObjects/Attribute");
			ДанныеТЧ.Вставить("Реквизиты", Реквизиты);
			МассивТЧ.Добавить(ДанныеТЧ);
		КонецЦикла;
		
	Исключение
		
		МассивТЧ = Неопределено;
		
	КонецПопытки;
	
	Возврат МассивТЧ;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьДанныеXML(ТекстXML)
	
	Данные = Неопределено;
	Чтение = Новый ЧтениеXML();
	
	Попытка
		Чтение.УстановитьСтроку(ТекстXML);
		Данные = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Исключение
		Данные = Неопределено;
	КонецПопытки;
	
	Чтение.Закрыть();
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСвойстваОбъектаИзВерсииXML(ТекстВерсии)
	
	СвойстваОбъекта = Неопределено;
	
	Если ЗначениеЗаполнено(ТекстВерсии) Тогда
		
		ДанныеОбъекта = ПрочитатьДанныеXML(ТекстВерсии);
		
		Если ДанныеОбъекта <> Неопределено Тогда
		
			Для Каждого Свойство Из ДанныеОбъекта.Свойства() Цикл
				
				ОбъектСвойства = ДанныеОбъекта.Получить(Свойство);
				
				Если ТипЗнч(ОбъектСвойства) = Тип("ОбъектXDTO") Тогда
					
					Попытка
						ДочерниеОбъекты = ОбъектСвойства.Получить("ChildObjects");
					Исключение
						Возврат Неопределено;
					КонецПопытки;
					
					СвойстваОбъекта = Новый Структура();
					
					Реквизиты = ПолучитьМассивРеквизитовОбъектаИзXML(ДочерниеОбъекты, "Attribute");
					Если Реквизиты <> Неопределено Тогда
						СвойстваОбъекта.Вставить("Реквизиты", Реквизиты);
					КонецЕсли;
					
					Измерения = ПолучитьМассивРеквизитовОбъектаИзXML(ДочерниеОбъекты, "Dimension");
					Если Измерения <> Неопределено Тогда
						СвойстваОбъекта.Вставить("Измерения", Измерения);
					КонецЕсли;
					
					Ресурсы = ПолучитьМассивРеквизитовОбъектаИзXML(ДочерниеОбъекты, "Resource");
					Если Ресурсы <> Неопределено Тогда
						СвойстваОбъекта.Вставить("Ресурсы", Ресурсы);
					КонецЕсли;
					
					ТабличныеЧасти = ПолучитьМассивТабличныхЧастейОбъектаИзXML(ДочерниеОбъекты);
					Если ТабличныеЧасти <> Неопределено Тогда
						СвойстваОбъекта.Вставить("ТабличныеЧасти", ТабличныеЧасти);
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СвойстваОбъекта;
	
КонецФункции

&НаКлиенте
Функция НайтиСтруктуруВМассивеПоИмени(Массив, Имя)
	
	Для Каждого Структура Из Массив Цикл
		
		Если Структура.Имя = Имя Тогда
			Возврат Структура;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьИзмененныеРеквизитыТабличныхЧастейОбъекта(ПредыдущиеТабличныеЧасти, ТекущиеТабличныеЧасти, ИзмененияСвойств, ИмяСвойства, Картинка)
	
	Для Каждого ТекущаяТЧ Из ТекущиеТабличныеЧасти Цикл
		
		ПредыдущаяТЧ = НайтиСтруктуруВМассивеПоИмени(ПредыдущиеТабличныеЧасти, ТекущаяТЧ.Имя);
		
		Если ПредыдущаяТЧ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТЧ.Реквизиты = Неопределено Или ПредыдущаяТЧ.Реквизиты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УдаленныеРеквизиты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПредыдущаяТЧ.Реквизиты.ПоИмени, ТекущаяТЧ.Реквизиты.ПоИмени);
		ДобавленныеРеквизиты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущаяТЧ.Реквизиты.ПоИмени, ПредыдущаяТЧ.Реквизиты.ПоИмени);
		УчтенныеРеквизиты = Новый Соответствие();
		
		ДанныеТЧ = Новый Структура("Имя, Картинка, Статус, Реквизиты", ТекущаяТЧ.Имя, Картинка, КартинкаИзменено, Новый Массив);
		
		Для Каждого Реквизит Из ДобавленныеРеквизиты Цикл
			УчтенныеРеквизиты[Реквизит] = Истина;
			ДанныеРеквизита = Новый Структура("Имя, Картинка, Статус", Реквизит, БиблиотекаКартинок.Реквизит, КартинкаДобавлено);
			ДанныеТЧ.Реквизиты.Добавить(ДанныеРеквизита);
		КонецЦикла;
		
		Для Каждого Реквизит Из УдаленныеРеквизиты Цикл
			ДанныеРеквизита = Новый Структура("Имя, Картинка, Статус", Реквизит, БиблиотекаКартинок.Реквизит, КартинкаУдалено);
			ДанныеТЧ.Реквизиты.Добавить(ДанныеРеквизита);
		КонецЦикла;
		
		ИзмененныеРеквизиты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущаяТЧ.Реквизиты.ПоТипу, ПредыдущаяТЧ.Реквизиты.ПоТипу);

		Для Каждого Реквизит Из ИзмененныеРеквизиты Цикл
			ИмяИзмененногоРеквизита = СтрРазделить(Реквизит, "|").Получить(0);
			Если УчтенныеРеквизиты[ИмяИзмененногоРеквизита] = Неопределено Тогда
				ДанныеРеквизита = Новый Структура("Имя, Картинка, Статус", ИмяИзмененногоРеквизита, БиблиотекаКартинок.Реквизит, КартинкаИзменено);
				ДанныеТЧ.Реквизиты.Добавить(ДанныеРеквизита);
			КонецЕсли;
		КонецЦикла;
		
		Если 0 < ДобавленныеРеквизиты.Количество() + УдаленныеРеквизиты.Количество() + ИзмененныеРеквизиты.Количество() Тогда
			ИзмененияСвойств.Изменения.Добавить(ДанныеТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИзмененныеТабличныеЧастиОбъекта(ПредыдущиеСвойства, ТекущиеСвойства, ИзмененияСвойств, Картинка)
	
	ПредыдущиеТабличныеЧасти = Неопределено;
	ТекущиеТабличныеЧасти = Неопределено;
	ИмяСвойства = "ТабличныеЧасти";
	
	Если ПредыдущиеСвойства.Свойство(ИмяСвойства, ПредыдущиеТабличныеЧасти) И ТекущиеСвойства.Свойство(ИмяСвойства, ТекущиеТабличныеЧасти) Тогда
		
		ПредыдущиеТЧ = Новый Массив();
		Для Каждого ТабличнаяЧасть Из ПредыдущиеТабличныеЧасти Цикл
			ПредыдущиеТЧ.Добавить(ТабличнаяЧасть.Имя);
		КонецЦикла;
		
		ТекущиеТЧ = Новый Массив();
		Для Каждого ТабличнаяЧасть Из ТекущиеТабличныеЧасти Цикл
			ТекущиеТЧ.Добавить(ТабличнаяЧасть.Имя);
		КонецЦикла;
		
		Запись = Новый Структура("Картинка, Изменения", Картинка, Новый Массив);
		
		УдаленныеТЧ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПредыдущиеТЧ, ТекущиеТЧ);
		ДобавленныеТЧ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущиеТЧ, ПредыдущиеТЧ);
		
		Для Каждого ИмяТЧ Из ДобавленныеТЧ Цикл
			ДанныеТЧ = Новый Структура("Имя, Картинка, Статус, Реквизиты", ИмяТЧ, Картинка, КартинкаДобавлено, Новый Массив);
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты.ПоИмени Цикл
				ДанныеРеквизита = Новый Структура("Имя, Картинка, Статус", Реквизит, БиблиотекаКартинок.Реквизит, КартинкаДобавлено);
				ДанныеТЧ.Реквизиты.Добавить(ДанныеРеквизита);
			КонецЦикла;
			Запись.Изменения.Добавить(ДанныеТЧ);
		КонецЦикла;
		
		Для Каждого ИмяТЧ Из УдаленныеТЧ Цикл
			ДанныеТЧ = Новый Структура("Имя, Картинка, Статус", ИмяТЧ, Картинка, КартинкаУдалено);
			Запись.Изменения.Добавить(ДанныеТЧ);
		КонецЦикла;
		
		ОпределитьИзмененныеРеквизитыТабличныхЧастейОбъекта(ПредыдущиеТабличныеЧасти, ТекущиеТабличныеЧасти, Запись, ИмяСвойства, Картинка);
		
		Если 0 < Запись.Изменения.Количество() Тогда
			Если ИзмененияСвойств = Неопределено Тогда
				ИзмененияСвойств = Новый Структура();
			КонецЕсли;
			ИзмененияСвойств.Вставить(ИмяСвойства, Запись);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзмененияСвойств;
	
КонецФункции

&НаКлиенте
Функция ОпределитьИзмененныеСвойстваОбъекта(ПредыдущиеСвойства, ТекущиеСвойства, ИзмененияСвойств, ИмяСвойства, Картинка)
	
	ПредыдущиеЗначения = Неопределено;
	ТекущиеЗначения = Неопределено;
	
	Если ПредыдущиеСвойства.Свойство(ИмяСвойства, ПредыдущиеЗначения) И ТекущиеСвойства.Свойство(ИмяСвойства, ТекущиеЗначения) Тогда
		
		Запись = Новый Структура("Картинка, Изменения", Картинка, Новый Массив);
		
		УдаленныеСвойства = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПредыдущиеЗначения.ПоИмени, ТекущиеЗначения.ПоИмени);
		ДобавленныеСвойства = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущиеЗначения.ПоИмени, ПредыдущиеЗначения.ПоИмени);
		УчтенныеСвойства = Новый Соответствие();
		
		Для Каждого Свойство Из ДобавленныеСвойства Цикл
			УчтенныеСвойства[Свойство] = Истина;
			ДанныеСвойства = Новый Структура("Имя, Картинка, Статус", Свойство, Картинка, КартинкаДобавлено);
			Запись.Изменения.Добавить(ДанныеСвойства);
		КонецЦикла;
		
		Для Каждого Свойство Из УдаленныеСвойства Цикл
			ДанныеСвойства = Новый Структура("Имя, Картинка, Статус", Свойство, Картинка, КартинкаУдалено);
			Запись.Изменения.Добавить(ДанныеСвойства);
		КонецЦикла;
		
		ИзмененныеСвойства = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущиеЗначения.ПоТипу, ПредыдущиеЗначения.ПоТипу);
		
		Для Каждого Свойство Из ИзмененныеСвойства Цикл
			ИмяИзмененногоСвойства = СтрРазделить(Свойство, "|").Получить(0);
			Если УчтенныеСвойства[ИмяИзмененногоСвойства] = Неопределено Тогда
				ДанныеСвойства = Новый Структура("Имя, Картинка, Статус", ИмяИзмененногоСвойства, Картинка, КартинкаИзменено);
				Запись.Изменения.Добавить(ДанныеСвойства);
			КонецЕсли;
		КонецЦикла;
		
		Если 0 < Запись.Изменения.Количество() Тогда
			Если ИзмененияСвойств = Неопределено Тогда
				ИзмененияСвойств = Новый Структура();
			КонецЕсли;
			ИзмененияСвойств.Вставить(ИмяСвойства, Запись);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзмененияСвойств;
	
КонецФункции

&НаКлиенте
Функция СравнитьСвойстваОбъекта(ПредыдущиеСвойства, ТекущиеСвойства)
	
	ИзмененияСвойств = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущиеСвойства) Тогда
		
		ИзмененияСвойств = ОпределитьИзмененныеСвойстваОбъекта(ПредыдущиеСвойства, 
			ТекущиеСвойства, ИзмененияСвойств, "Измерения", БиблиотекаКартинок.Измерение);
		
		ИзмененияСвойств = ОпределитьИзмененныеСвойстваОбъекта(ПредыдущиеСвойства, 
			ТекущиеСвойства, ИзмененияСвойств, "Реквизиты", БиблиотекаКартинок.Реквизит);
			
		ИзмененияСвойств = ОпределитьИзмененныеСвойстваОбъекта(ПредыдущиеСвойства, 
			ТекущиеСвойства, ИзмененияСвойств, "Ресурсы", БиблиотекаКартинок.Ресурс);
			
		ИзмененияСвойств = ОпределитьИзмененныеТабличныеЧастиОбъекта(ПредыдущиеСвойства, 
			ТекущиеСвойства, ИзмененияСвойств, БиблиотекаКартинок.ВложеннаяТаблица);
		
	КонецЕсли;
	
	Возврат ИзмененияСвойств;
	
КонецФункции

&НаКлиенте
Функция ОпределитьСвойстваНовогоОбъекта(ТекущиеСвойства, ИзмененияСвойств, ИмяСвойства, Картинка)
	
	ТекущиеЗначения = Неопределено;
	
	Если ТекущиеСвойства.Свойство(ИмяСвойства, ТекущиеЗначения) Тогда
		
		Запись = Новый Структура("Картинка, Статус, Изменения", Картинка, КартинкаДобавлено, Новый Массив);
		
		Для Каждого Свойство Из ТекущиеЗначения.ПоИмени Цикл
			ДанныеСвойства = Новый Структура("Имя, Картинка, Статус", Свойство, Картинка, КартинкаДобавлено);
			Запись.Изменения.Добавить(ДанныеСвойства);
		КонецЦикла;
		
		Если 0 < Запись.Изменения.Количество() Тогда
			Если ИзмененияСвойств = Неопределено Тогда
				ИзмененияСвойств = Новый Структура();
			КонецЕсли;
			ИзмененияСвойств.Вставить(ИмяСвойства, Запись);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзмененияСвойств;
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличныеЧастиНовогоОбъекта(ТекущиеСвойства, ИзмененияСвойств, Картинка)
	
	ТекущиеТабличныеЧасти = Неопределено;
	ИмяСвойства = "ТабличныеЧасти";
	
	Если ТекущиеСвойства.Свойство(ИмяСвойства, ТекущиеТабличныеЧасти) Тогда
		
		Запись = Новый Структура("Картинка, Статус, Изменения", Картинка, КартинкаДобавлено, Новый Массив);
		
		Для Каждого ТабличнаяЧасть Из ТекущиеТабличныеЧасти Цикл
			
			ДанныеТЧ = Новый Структура("Имя, Картинка, Статус, Реквизиты", ТабличнаяЧасть.Имя, Картинка, КартинкаДобавлено, Новый Массив);
			
			Если ТабличнаяЧасть.Реквизиты <> Неопределено Тогда
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты.ПоИмени Цикл
					ДанныеРеквизита = Новый Структура("Имя, Картинка, Статус", Реквизит, Картинка, КартинкаДобавлено);
					ДанныеТЧ.Реквизиты.Добавить(ДанныеРеквизита);
				КонецЦикла;
			КонецЕсли;
			
			Запись.Изменения.Добавить(ДанныеТЧ);
			
		КонецЦикла;
		
		Если 0 < Запись.Изменения.Количество() Тогда
			Если ИзмененияСвойств = Неопределено Тогда
				ИзмененияСвойств = Новый Структура();
			КонецЕсли;
			ИзмененияСвойств.Вставить(ИмяСвойства, Запись);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзмененияСвойств;
	
КонецФункции

&НаКлиенте
Функция СвойстваНовогоОбъекта(ТекущиеСвойства)
	
	ИзмененияСвойств = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущиеСвойства) Тогда
		
		ИзмененияСвойств = ОпределитьСвойстваНовогоОбъекта(ТекущиеСвойства, ИзмененияСвойств, "Измерения", БиблиотекаКартинок.Измерение);
		ИзмененияСвойств = ОпределитьСвойстваНовогоОбъекта(ТекущиеСвойства, ИзмененияСвойств, "Реквизиты", БиблиотекаКартинок.Реквизит);
		ИзмененияСвойств = ОпределитьСвойстваНовогоОбъекта(ТекущиеСвойства, ИзмененияСвойств, "Ресурсы", БиблиотекаКартинок.Ресурс);
		ИзмененияСвойств = ОпределитьТабличныеЧастиНовогоОбъекта(ТекущиеСвойства, ИзмененияСвойств, БиблиотекаКартинок.ВложеннаяТаблица);
		
	КонецЕсли;
	
	Возврат ИзмененияСвойств;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИзмененияСвойствОбъекта(Файл, КоммитыДляСравнения)
	
	ИзмененияСвойств = Новый Структура("ОбъектДобавлен, ОбъектУдален", Ложь, Ложь);
	
	Если Объект.АнализироватьТолькоИзменениеКода = Ложь И СтрЗаканчиваетсяНа(НРег(Файл), ".xml") Тогда
		
		Если КоммитыДляСравнения.ПроанализированныеФайлы[Файл] <> Неопределено Тогда
			Возврат ИзмененияСвойств;
		КонецЕсли;
		
		Версии = ПолучитьВерииФайла(Файл, КоммитыДляСравнения);
		
		ИзмененияСвойств.ОбъектДобавлен = Не ЗначениеЗаполнено(Версии.ПредыдущаяВерсия);
		ИзмененияСвойств.ОбъектУдален = Не ЗначениеЗаполнено(Версии.ТекущаяВерсия);
		
		ПредыдущиеСвойстваОбъекта = ПолучитьСвойстваОбъектаИзВерсииXML(Версии.ПредыдущаяВерсия);
		ТекущиеСвойстваОбъекта = ПолучитьСвойстваОбъектаИзВерсииXML(Версии.ТекущаяВерсия);
		
		Если ЗначениеЗаполнено(ПредыдущиеСвойстваОбъекта) Тогда
			Результат = СравнитьСвойстваОбъекта(ПредыдущиеСвойстваОбъекта, ТекущиеСвойстваОбъекта);
			Если Результат <> Неопределено Тогда
				ИзмененияСвойств.Вставить("Изменения", Результат);
			КонецЕсли;
		Иначе
			Результат = СвойстваНовогоОбъекта(ТекущиеСвойстваОбъекта);
			Если Результат <> Неопределено Тогда
				ИзмененияСвойств.Вставить("Изменения", Результат);
			КонецЕсли;
		КонецЕсли;
		
		КоммитыДляСравнения.ПроанализированныеФайлы[Файл] = Истина;
		
	КонецЕсли;
	
	Возврат ИзмененияСвойств;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКартинкуОбъектаМетаданных(ИмяОбъекта)
	
	Картинка = Неопределено;
	
	Если ИмяОбъекта = "Подсистема" Тогда
		Картинка = КартинкаПодсистема;
	ИначеЕсли ИмяОбъекта = "ОбщаяФорма" Тогда
		Картинка = БиблиотекаКартинок.Форма;
	ИначеЕсли ИмяОбъекта = "ОпределяемыйТип" Тогда
		Картинка = БиблиотекаКартинок.ОформлениеКвадратыЗаполненныеОдин;
	ИначеЕсли ИмяОбъекта = "ОбщийМакет" Тогда
		Картинка = БиблиотекаКартинок.ТабличныйДокументОтображатьЗаголовки;
	ИначеЕсли ИмяОбъекта = "ПодпискаНаСобытие" Тогда
		Картинка = КартинкаПодписка;
	ИначеЕсли ИмяОбъекта = "ОбщаяКоманда" Тогда
		Картинка = БиблиотекаКартинок.КомандаМенюФункций;
	ИначеЕсли ИмяОбъекта = "ОбщаяКартинка" Тогда
		Картинка = БиблиотекаКартинок.Картинка;
	ИначеЕсли ИмяОбъекта = "HTTPСервис" Или ИмяОбъекта = "WebСервис" Или ИмяОбъекта = "WSСсылка" Тогда
		Картинка = КартинкаИнтернет;
	Иначе
		Попытка
			Картинка = БиблиотекаКартинок[ИмяОбъекта];
		Исключение
			Если ИмяОбъекта = "ОбщийМодуль" Тогда
				Картинка = БиблиотекаКартинок.РежимПросмотраСпискаСписок;
			ИначеЕсли ИмяОбъекта = "Роль" Тогда
				Картинка = КартинкаРоль;
			Иначе
				Картинка = БиблиотекаКартинок.ОформлениеКвадратыПустые;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеОбъектаМетаданныхПоИмениФайл(Файл, КоммитыДляСравнения)
	
	Описание = Неопределено;
	
	Путь = ПолучитьПутьИзмененийПоИмениФайла(Файл);
	ЧастиПути = СтрРазделить(Путь, ".");
	ВидОбъекта = ЧастиПути[0];
	НазваниеОбъекта =  ЧастиПути[1];
	
	ИмяОбъекта = ОпределитьИмяОбъектаМетаданных(ВидОбъекта);
	
	Если Не ЗначениеЗаполнено(ИмяОбъекта) Тогда
		
		КаталогКонфигурации = ОпределитьКаталогКонфигурации(КоммитыДляСравнения.ТекущаяВерсия.Хеш);
		Если ЗначениеЗаполнено(КаталогКонфигурации) Тогда
			Элементы.Коммиты.ТекущиеДанные.КаталогКонфигурации = КаталогКонфигурации;
			ТекущийКаталогКонфигурации = КаталогКонфигурации;
			Путь = ПолучитьПутьИзмененийПоИмениФайла(Файл);
			ЧастиПути = СтрРазделить(Путь, ".");
			ВидОбъекта = ЧастиПути[0];
			НазваниеОбъекта =  ЧастиПути[1];
			ИмяОбъекта = ОпределитьИмяОбъектаМетаданных(ВидОбъекта);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяОбъекта) Тогда
		
		ИмяДляСортировки = ИмяОбъекта;
		ИмяОбъекта = Сред(ИмяОбъекта, 4);
		ИзмененияСвойств = ПолучитьИзмененияСвойствОбъекта(Файл, КоммитыДляСравнения);
		Картинка = ПолучитьКартинкуОбъектаМетаданных(ИмяОбъекта);
		
		ИмяОбъекта = СтрШаблон("%1.%2", ИмяОбъекта, НазваниеОбъекта);
		Описание = Новый Структура();
		Описание.Вставить("ИмяОбъекта", ИмяОбъекта);
		Описание.Вставить("ИмяДляСортировки", ИмяДляСортировки);
		Описание.Вставить("Файл", Файл);
		Описание.Вставить("Путь", Путь);
		Описание.Вставить("Картинка", Картинка);
		Описание.Вставить("Составляющие", Новый Массив);
		Описание.Вставить("ИзмененияСвойств", ИзмененияСвойств);
		
		Картинка = Неопределено;
		
		Для Индекс = 2 По ЧастиПути.Количество() - 1 Цикл
			
			Часть = ЧастиПути[Индекс];
			
			Если Часть = "ManagerModule" Тогда
				Имя = "Модуль менеджера";
				Картинка = БиблиотекаКартинок.РежимПросмотраСпискаСписок;
			ИначеЕсли Часть = "ObjectModule" Тогда
				Имя = "Модуль объекта";
				Картинка = БиблиотекаКартинок.РежимПросмотраСпискаСписок;
			ИначеЕсли Часть = "Subsystems" Тогда
				Картинка = КартинкаПодсистема;
				Продолжить;
			ИначеЕсли Часть = "Module" Или Часть = "CommandModule" Тогда
				Продолжить;
			ИначеЕсли Часть = "Forms" Тогда
				Картинка = БиблиотекаКартинок.Форма;
				Продолжить;
			ИначеЕсли Часть = "Commands" Тогда
				Имя = "Команды";
				Картинка = БиблиотекаКартинок.КомандаМенюФункций;
			ИначеЕсли Часть = "Templates" Тогда
				Имя = "Макеты";
				Картинка = БиблиотекаКартинок.ТабличныйДокументОтображатьЗаголовки;
			Иначе
				Если 0 < СтрНайти(Часть, "Форма") Тогда
					Картинка = БиблиотекаКартинок.Форма;
				КонецЕсли;
				Имя = Часть;
			КонецЕсли;
			
			Описание.Составляющие.Добавить(Новый Структура("Имя, Картинка", Имя, Картинка));
			Картинка = Неопределено;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзмененныйОбъект(ОписаниеОбъекта)
	
	Если ЗначениеЗаполнено(ОписаниеОбъекта) Тогда
		
		Путь = НРег(ОписаниеОбъекта.ИмяОбъекта);
		Отбор = Новый Структура("Путь", Путь);
		
		Поиск = ИзмененныеФайлы.НайтиСтроки(Отбор);
		
		Если Поиск.Количество() = 0 Тогда
			
			СтрокаОбъекта = ИзмененныеОбъекы.ПолучитьЭлементы().Добавить();
			СтрокаОбъекта.Объект = ОписаниеОбъекта.ИмяОбъекта;
			СтрокаОбъекта.Картинка = ОписаниеОбъекта.Картинка;
			
			Если ОписаниеОбъекта.ИзмененияСвойств.ОбъектДобавлен Тогда
				СтрокаОбъекта.Статус = КартинкаДобавлено;
			ИначеЕсли ОписаниеОбъекта.ИзмененияСвойств.ОбъектУдален Тогда
				СтрокаОбъекта.Статус = КартинкаУдалено;
			Иначе
				СтрокаОбъекта.Статус = КартинкаИзменено;
			КонецЕсли;
			
			СтрокаФайла = ИзмененныеФайлы.Добавить();
			СтрокаФайла.Путь =  Путь;
			СтрокаФайла.Файл = ОписаниеОбъекта.Файл;
			СтрокаФайла.ИдентификаторСтрокиОбъекта = СтрокаОбъекта.ПолучитьИдентификатор();
		Иначе
			СтрокаОбъекта = ИзмененныеОбъекы.НайтиПоИдентификатору(Поиск[0].ИдентификаторСтрокиОбъекта);
		КонецЕсли;
		
		Если ОписаниеОбъекта.ИзмененияСвойств.Свойство("Изменения") Тогда
			
			Для Каждого Обход Из ОписаниеОбъекта.ИзмененияСвойств.Изменения Цикл
				
				СтрокаСвойства = СтрокаОбъекта.ПолучитьЭлементы().Добавить();
				СтрокаСвойства.Объект = Обход.Ключ;
				СтрокаСвойства.Картинка = Обход.Значение.Картинка;
				
				Если Обход.Значение.Свойство("Статус") Тогда
					СтрокаСвойства.Статус = Обход.Значение.Статус;
				Иначе
					СтрокаСвойства.Статус = КартинкаИзменено;
				КонецЕсли;
				
				Для Каждого Параметр Из Обход.Значение.Изменения Цикл
					
					СтрокаПараметра = СтрокаСвойства.ПолучитьЭлементы().Добавить();
					СтрокаПараметра.Объект = Параметр.Имя;
					СтрокаПараметра.Картинка = Параметр.Картинка;
					СтрокаПараметра.Статус = Параметр.Статус;
					
					Если Параметр.Свойство("Реквизиты") Тогда
						Для Каждого Реквизит Из Параметр.Реквизиты Цикл
							СтрокаРеквизита = СтрокаПараметра.ПолучитьЭлементы().Добавить();
							СтрокаРеквизита.Объект = Реквизит.Имя;
							СтрокаРеквизита.Картинка = Реквизит.Картинка;
							СтрокаРеквизита.Статус = Реквизит.Статус;
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Обход.Значение.Изменения.Количество() = 0 Тогда
					СтрокаСвойства.Статус = КартинкаИзменено;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
		Для Каждого Обход Из ОписаниеОбъекта.Составляющие Цикл
			
			ЭлементНайден = Ложь;
			Для Каждого Элемент Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
				Если НРег(Элемент.Объект) = НРег(Обход.Имя) Тогда
					СтрокаОбъекта = Элемент;
					ЭлементНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЭлементНайден Тогда
				СтрокаОбъекта = СтрокаОбъекта.ПолучитьЭлементы().Добавить();
				СтрокаОбъекта.Объект = Обход.Имя;
				СтрокаОбъекта.Картинка = Обход.Картинка;
			КонецЕсли;
			
		КонецЦикла;
			
		СтрокаОбъекта.Файл = ОписаниеОбъекта.Файл;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзмененныеОбъекты(КоммитыДляСравнения)
	
	ИзмененныеОбъекы.ПолучитьЭлементы().Очистить();
	ИзмененныеФайлы.Очистить();
	СписокОбъектов = Новый СписокЗначений();
	КоличествоКоммитов = КоммитыДляСравнения.УчитываемыеКоммиты.Количество();
	ВыводитьСостояние = (ОграничениеПоКоммитам <= КоличествоКоммитов);
	Счетчик = 0;
	ОшибочнаяКодировка = Ложь;
	
	Для Каждого Коммит Из КоммитыДляСравнения.УчитываемыеКоммиты Цикл
		
		Файлы = ПолучитьИзмененныеФайлыПоКоммиту(Коммит.Хеш);
		
		Для Каждого Файл Из Файлы Цикл
			
			ОшибочнаяКодировка = Макс(ОшибочнаяКодировка, ВозможнаОшибкаВКодировке(Файл));
			ИмяФайла = СтрЗаменить(Файл, """", "");
			
			Если НужноОбрабатыватьИзмененныйФайл(ИмяФайла) Тогда
				
				Описание = ПолучитьОписаниеОбъектаМетаданныхПоИмениФайл(ИмяФайла, КоммитыДляСравнения);
				Если ЗначениеЗаполнено(Описание) Тогда
					СписокОбъектов.Добавить(Описание, Описание.ИмяДляСортировки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Счетчик = Счетчик + 1;
		Прогресс = Счетчик / КоличествоКоммитов * 100;
		
		Если ВыводитьСостояние Тогда
			Состояние(СостояниеАнализа, Прогресс);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОбъектов.СортироватьПоПредставлению();
	Для Каждого Обход Из СписокОбъектов Цикл
		ДобавитьИзмененныйОбъект(Обход.Значение);
	КонецЦикла;
	
	СостояниеАнализа = "";
	Состояние();
	
	Если ОшибочнаяКодировка Тогда
		Текст = НСтр("ru = 'Возможно, вывод git имеет некорректный формат и в каталоге репозитория следует выполнить команду ""git config core.quotePath false""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДлительногоАнализаЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьИзмененныеОбъекты(ДопПараметры);
	Иначе
		СостояниеАнализа = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДлительногоАнализаФайловЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьАнализИзменений();
	Иначе
		СостояниеАнализа = "";
		Элементы.НачатьCodeReview.Доступность = Истина;
		Элементы.ОткрытиеРезультата.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАнализИзменений() Экспорт
	
	ОчиститьТекстРедактора();
	КоммитыДляСравнения = ПолучитьКоммитыДляСравнения();
	
	Если ОграничениеПоКоммитам <= КоммитыДляСравнения.УчитываемыеКоммиты.Количество() Тогда
		Обработчик = Новый ОписаниеОповещения("ВопросДлительногоАнализаЗавершение", ЭтотОбъект, КоммитыДляСравнения);
		ТекстВопроса = НСтр("ru = 'Для выбранного количества версий анализ изменений может выполняться продолжительное время. Продолжить?'");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИзмененныеОбъекты(КоммитыДляСравнения);
	КонецЕсли;
	
	Элементы.НачатьCodeReview.Доступность = Истина;
	Элементы.ОткрытиеРезультата.Доступность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановлениеРезультатов

&НаСервере
Процедура СформироватьВнутреннююСсылку()
	
	Попытка
		ВнутренняяСсылка = Вычислить("РецензированиеСлужебный.НавигационнаяСсылка()");
	Исключение
		ВнутренняяСсылка = "";
	КонецПопытки
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроек()
	
	Возврат "CodeReview";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПользовательНастроек()
	
	Возврат "CodeReview";
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьРезультатCodeReviewВХранилище(Результат, ТекущаяСсылка, ВнутренняяСсылка)
	
	Пользователь = ПользовательНастроек();
	Ключ = КлючНастроек();
	Идентификатор = ТекущаяСсылка;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Идентификатор = ВнутренняяСсылка + Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Описание = Новый ОписаниеНастроек();
	Описание.Представление = СтрШаблон("Результаты Code Review от %1 (%2)", Формат(Результат.Дата, "ДЛФ=DT"), ИмяПользователя());
	ХранилищеСистемныхНастроек.Сохранить(Ключ, Идентификатор, Результат, Описание, Пользователь);
	ХранилищеСистемныхНастроек.Сохранить(Ключ, Идентификатор, Идентификатор, Описание);
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиенте
Процедура СохранитьРезультатВФайл(Результат, ИмяФайла)
	
	JSON = СериализоватьJSON(Результат);
	
	Если ЗначениеЗаполнено(JSON) Тогда
		
		ВремяФайл = ПолучитьИмяВременногоФайла("json");
		
		Файл = Новый ЗаписьТекста(ВремяФайл, КодировкаТекста.UTF8);
		Файл.Записать(JSON);
		Файл.Закрыть();
		
		ПотокЗаписи = Новый ПотокВПамяти;
		
		ЗаписьZip = Новый ЗаписьZipФайла(ПотокЗаписи);
		ЗаписьZip.Добавить(ВремяФайл);
		ЗаписьZip.Записать();
		
		УдалитьФайлы(ВремяФайл);
		
		ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные().Записать(ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляСохраненияЗавершение(Файлы, Результат) Экспорт
	
	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда
		ИмяФайла = Файлы[0];
		СохранитьРезультатВФайл(Результат, ИмяФайла);
		ТекстСообщения = НСтр("ru = 'Результат сохранен в файл:'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИмяФайла);
		ЗаполнитьРезультатыПроверок();
		ЗавершитьCodeReview();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатCodeReviewВФайл(Результат)
	
	Обработчик = Новый ОписаниеОповещения("ВыборФайлаДляСохраненияЗавершение", ЭтотОбъект, Результат);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Результат Code Review|*.1crv";
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатCodeReview(Результат)
	
	Если Объект.ВариантСохраненияРезультатовПроверки = 0 Тогда
		Идентификатор = СохранитьРезультатCodeReviewВХранилище(Результат, ТекущаяСсылка, ВнутренняяСсылка);
		ТекстСообщения = НСтр("ru = 'Ссылка на результат:'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Идентификатор);
		ЗаполнитьРезультатыПроверок();
		ЗавершитьCodeReview();
	Иначе
		СохранитьРезультатCodeReviewВФайл(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСбросаCodeReview(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗавершитьCodeReview();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СериализоватьJSON(Данные)
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(Запись, Данные);
		Возврат Запись.Закрыть();
	Исключение
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ДесериализоватьJSON(Данные)
	
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Данные);
	Попытка
		Результат = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат Результат;
	Исключение
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРезультатПроверкиПоСсылке(Ссылка)
	
	Пользователь = ПользовательНастроек();
	Возврат ХранилищеСистемныхНастроек.Загрузить(КлючНастроек(), Ссылка, , Пользователь);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатПроверкиПолучен(Результат, Ссылка)
	
	Отказ = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось получить результат проверки ""%1"".
		|Данные повреждены или указана некорректная ссылка'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРезультатыПроверок()
	
	Результаты.Очистить();
	Список = ХранилищеСистемныхНастроек.ПолучитьСписок(КлючНастроек());
	Пользователь = ПользовательНастроек();
	
	Для Каждого Элемент Из Список Цикл
		СтрокаТаблицы = Результаты.Добавить();
		СтрокаТаблицы.Ссылка = Элемент.Значение;
		Результат = ПолучитьРезультатПроверкиПоСсылке(Элемент.Значение);
		Если РезультатПроверкиПолучен(Результат, Элемент.Значение) Тогда
			СтрокаТаблицы.Дата = Результат.Дата;
			СтрокаТаблицы.КоличествоЗамечаний = Результат.КоличествоЗамечаний;
			СтрокаТаблицы.Комментарий = Результат.Комментарий;
			СтрокаТаблицы.ДействиеИзменить = БиблиотекаКартинок.Изменить;
			СтрокаТаблицы.ДействиеПросмотреть = БиблиотекаКартинок.АктивироватьЗадачу;
			СтрокаТаблицы.ДействиеУдалить = БиблиотекаКартинок.Удалить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьРезультатПроверки(Идентификатор)
	
	ХранилищеСистемныхНастроек.Удалить(КлючНастроек(), Идентификатор, ПользовательНастроек());
	ХранилищеСистемныхНастроек.Удалить(КлючНастроек(), Идентификатор, ИмяПользователя());
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдаленияРезультатаПроверкиЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда

		УдалитьРезультатПроверки(ДопПараметры.Идентификатор);
		
		Если ДопПараметры.Свойство("ВыбраннаяСтрока") Тогда
			Результаты.Удалить(Результаты.НайтиПоИдентификатору(ДопПараметры.ВыбраннаяСтрока));
		Иначе
			ЗаполнитьРезультатыПроверок();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИзвлечьРезультатПроверкиИзФайла(ИмяФайла)
	
	Результат = Неопределено;  
	
	Каталог = СоздатьКаталогВременныхФайлов();
	ЧтениеZip = Новый ЧтениеZipФайла(ИмяФайла);
	ЧтениеZip.ИзвлечьВсе(Каталог);
	ЧтениеZip.Закрыть();
	
	Файлы = НайтиФайлы(Каталог, "*.json");
	
	Для Каждого Файл Из Файлы Цикл
		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		Текст = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		Результат = ДесериализоватьJSON(Текст);
	КонецЦикла;
	
	УдалитьФайлы(Каталог);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыборФайлаДляОткрытияЗавершение(Файлы, ДопПараметры) Экспорт
	
	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда
		
		ИмяФайла = Файлы[0];
		Результат = ИзвлечьРезультатПроверкиИзФайла(ИмяФайла);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ОткрытьРезультатCodeReview(Результат, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСсылкиРезультатаЗавершение(Ссылка, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ОткрытьРезультатПроверкиПоСсылке(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область CodeReview

&НаКлиенте
Процедура ПерейтиКПервомуЗамечанию() Экспорт
	
	View().goNextIssue();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстРедактора()
	
	Если ДокументЗагружен Тогда
		View().compare();
		ОчиститьТекст();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИзмененияОбъекта(ТекущийОбъект, КоммитыДляСравнения)
	
	ОчиститьТекстРедактора();
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ПредыдущаяВерсия) И Не ЗначениеЗаполнено(ТекущийОбъект.ТекущаяВерсия) Тогда
		Версии = ПолучитьВерииФайла(ТекущийОбъект.Файл, КоммитыДляСравнения);
		ТекущийОбъект.ПредыдущаяВерсия = Версии.ПредыдущаяВерсия;
		ТекущийОбъект.ТекущаяВерсия = Версии.ТекущаяВерсия;
	КонецЕсли;
	
	ФайлСКодом = СтрЗаканчиваетсяНа(ТекущийОбъект.Файл, ".bsl");
	
	Если ФайлСКодом Тогда
		View().setLanguageMode("bsl");
	Иначе
		View().setLanguageMode("xml");
	КонецЕсли;
	
	УстановитьТекст(ТекущийОбъект.ПредыдущаяВерсия, Неопределено, Ложь);
	View().compare(ТекущийОбъект.ТекущаяВерсия, ДвухстороннийРежим, Истина);
	
	Если ФайлСКодом Тогда
		ПереключитьТему();
	КонецЕсли;
	
	Если 0 < ТекущийОбъект.КоличествоЗамечаний Тогда
		View().setReviewIssues(ТекущийОбъект.Замечания);
	КонецЕсли;
	
	ЕстьЗамечания = (0 < View().getReviewIssues().length);
	ОбновитьБлокУправленияЗамечаниями();
	
	Если 0 < СтатусCodeReview И ЕстьЗамечания Тогда
		ПодключитьОбработчикОжидания("ПерейтиКПервомуЗамечанию", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗапускеОстановкеCodeReview()
	
	РежимПроверки = (0 < СтатусCodeReview);
	
	Элементы.НачатьCodeReview.КнопкаПоУмолчанию = Не РежимПроверки;
	Элементы.НачатьCodeReview.Видимость = Не РежимПроверки;
	Элементы.Каталог.Видимость = Не РежимПроверки;
	Элементы.ДополнительныеНастройки.Видимость = Не РежимПроверки;
	Элементы.Коммиты.Видимость = Не РежимПроверки;
	Элементы.ЗакончитьCodeReview.КнопкаПоУмолчанию = РежимПроверки;
	Элементы.ЗакончитьCodeReview.Видимость = РежимПроверки;
	Элементы.УправлениеЗамечаниями.Видимость = РежимПроверки;
	Элементы.ИзмененныеОбъекыКоличествоЗамечаний.Видимость = РежимПроверки;
	Элементы.ДвухстороннийРежим.Доступность = Не РежимПроверки;
	Элементы.BSLLS.Видимость = РежимПроверки;
	Элементы.ПолучитьЗамечанияBSLLS.Видимость = РежимПроверки;
	
	Если Не РежимПроверки Тогда
		Элементы.УправлениеЗамечаниями.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьCodeReview(ТолькоПросмотр)
	
	Если Элементы.ПоказатьСкрытьНастройки.Пометка Тогда
		Элементы.ПоказатьСкрытьНастройки.Пометка = Ложь;
		УправлениеВидимостьюНастроек();
	КонецЕсли;
	
	View().startCodeReview(ТолькоПросмотр);
	
	Если ТолькоПросмотр Тогда
		СтатусCodeReview = 2;
	Иначе
		СтатусCodeReview = 1;
	КонецЕсли;
	
	ПриЗапускеОстановкеCodeReview();
	
	ОпределитьДоступностьАнализаBSLLS();
	ОбновитьБлокУправленияЗамечаниями();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗамечаниеДляСтрокиОбъекта(СтрокаОбъекта)
	
	Замечание = Новый Структура();
	Замечание.Вставить("Объект", СтрокаОбъекта.Объект);
	Замечание.Вставить("Файл", СтрокаОбъекта.Файл);
	Замечание.Вставить("Картинка", Base64Строка(СтрокаОбъекта.Картинка.ПолучитьДвоичныеДанные()));
	Замечание.Вставить("Статус", Base64Строка(СтрокаОбъекта.Статус.ПолучитьДвоичныеДанные()));
	Замечание.Вставить("Замечания", СтрокаОбъекта.Замечания);
	Замечание.Вставить("КоличествоЗамечаний", СтрокаОбъекта.КоличествоЗамечаний);
	Замечание.Вставить("ПредыдущаяВерсия", СтрокаОбъекта.ПредыдущаяВерсия);
	Замечание.Вставить("ТекущаяВерсия", СтрокаОбъекта.ТекущаяВерсия);
	Замечание.Вставить("Строки", Новый Массив);
	
	Для Каждого СтрокаВложенногоОбъекта Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
		ВложенноеЗамечание = ПолучитьЗамечаниеДляСтрокиОбъекта(СтрокаВложенногоОбъекта);
		Если ВложенноеЗамечание <> Неопределено Тогда
			Замечание.Строки.Добавить(ВложенноеЗамечание);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Замечание;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗамечанияПоРезультатамПроверки()
	
	Результат = Новый Структура();
	Результат.Вставить("Список", Новый Массив);
	Результат.Вставить("КоличествоЗамечаний", 0);
	
	Для Каждого СтрокаОбъекта Из ИзмененныеОбъекы.ПолучитьЭлементы() Цикл
		
		Если 0 < СтрокаОбъекта.КоличествоЗамечаний Тогда
			Замечание = ПолучитьЗамечаниеДляСтрокиОбъекта(СтрокаОбъекта);
			Результат.Список.Добавить(Замечание);
			Результат.КоличествоЗамечаний = Результат.КоличествоЗамечаний + СтрокаОбъекта.КоличествоЗамечаний;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКомментарийПроверки()
	
	Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		
		Возврат ТекущийКомментарий;
		
	Иначе
		
		Комментарии = Новый Массив();
		КоммитыДляСравнения = ПолучитьКоммитыДляСравнения();
		
		Для Каждого Коммит Из КоммитыДляСравнения.УчитываемыеКоммиты Цикл
			Если ЗначениеЗаполнено(Коммит.Комментарий) Тогда
				Комментарии.Добавить(Коммит.Комментарий);
			КонецЕсли;
		КонецЦикла;
		
		Возврат СтрСоединить(Комментарии, " / ");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРезультатыCodeReview()
	
	РезультатыПроверки = Новый Структура();
	Замечания = ПолучитьЗамечанияПоРезультатамПроверки();
	Комментарий = ПолучитьКомментарийПроверки();
	Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	РезультатыПроверки.Вставить("Дата", Дата);
	РезультатыПроверки.Вставить("Замечания", Замечания.Список);
	РезультатыПроверки.Вставить("КоличествоЗамечаний", Замечания.КоличествоЗамечаний);
	РезультатыПроверки.Вставить("Комментарий", Комментарий);
	РезультатыПроверки.Вставить("ЕстьЗамечания", 0 < Замечания.КоличествоЗамечаний);
	
	Возврат РезультатыПроверки;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьCodeReview()
	
	СтатусCodeReview = 0;
	ПриЗапускеОстановкеCodeReview();
	ТекущаяСсылка = "";
	View().stopCodeReview();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗавершенияCodeReview(Ответ, Результат) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьРезультатCodeReview(Результат);
	Иначе
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Обработчик = Новый ОписаниеОповещения("ВопросСбросаCodeReview", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Результаты Code Review будут утеряны. Продолжить?'");
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакончитьCodeReview(Результат)
	
	Если Объект.ВариантСохраненияРезультатовПроверки = 0 Тогда
		Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
			ТекстВопроса = НСтр("ru = 'Результаты Code Review будут обновлены. Продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Завершить процедуру Code Review?
			|Продолжить процедуру или посмотреть на результаты в дальнейшем можно будет из списка всех проведенных проверок.'");
		КонецЕсли;
	Иначе
		ТекстВопроса = НСтр("ru = 'Завершить процедуру Code Review?'");
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ВопросЗавершенияCodeReview", ЭтотОбъект, Результат);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзмененныйОбъектыПоЗамечаниям(Замечание, Родитель)
	
	СтрокаОбъекта = Родитель.ПолучитьЭлементы().Добавить();
	СтрокаОбъекта.Объект = Замечание.Объект;
	СтрокаОбъекта.Файл = Замечание.Файл;
	СтрокаОбъекта.Картинка = Новый Картинка(Base64Значение(Замечание.Картинка));
	СтрокаОбъекта.Статус = Новый Картинка(Base64Значение(Замечание.Статус));
	СтрокаОбъекта.Замечания = Замечание.Замечания;
	СтрокаОбъекта.КоличествоЗамечаний = Замечание.КоличествоЗамечаний;
	СтрокаОбъекта.ПредыдущаяВерсия = Замечание.ПредыдущаяВерсия;
	СтрокаОбъекта.ТекущаяВерсия = Замечание.ТекущаяВерсия;
	
	Для Каждого Строка Из Замечание.Строки Цикл
		ЗаполнитьИзмененныйОбъектыПоЗамечаниям(Строка, СтрокаОбъекта);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзмененныеОбъектыПоРезультатамПроверки(Результат)
	
	ИзмененныеОбъекы.ПолучитьЭлементы().Очистить();
	
	Для Каждого Замечание Из Результат.Замечания Цикл
		ЗаполнитьИзмененныйОбъектыПоЗамечаниям(Замечание, ИзмененныеОбъекы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатCodeReview(Результат, ТолькоПросмотр)
	
	Если Элементы.Режимы.ТекущаяСтраница = Элементы.Режимы.ПодчиненныеЭлементы.РезультатыПроверок Тогда
		ПоказатьСкрытьРезультатыПроверок();
	КонецЕсли;
	ЗапуститьCodeReview(ТолькоПросмотр);
	ЗаполнитьИзмененныеОбъектыПоРезультатамПроверки(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатПроверкиПоСсылке(Ссылка, ТолькоПросмотр = Истина)
	
	Результат = ПолучитьРезультатПроверкиПоСсылке(Ссылка);
	
	Если РезультатПроверкиПолучен(Результат, Ссылка) Тогда
		ТекущаяСсылка = Ссылка;
		ТекущийКомментарий = Результат.Комментарий;
		ОткрытьРезультатCodeReview(Результат, ТолькоПросмотр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПросмотраРезультатаПроверкиЗавершение(Ответ, Идентификатор) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьРезультатПроверкиПоСсылке(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзмененияРезультатаПроверкиЗавершение(Ответ, Идентификатор) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьРезультатПроверкиПоСсылке(Идентификатор, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоЗамечанийВРодительскихСтроках(СтрокаРодителя, Разница)
	
	Если СтрокаРодителя <> Неопределено Тогда
		СтрокаРодителя.КоличествоЗамечаний = СтрокаРодителя.КоличествоЗамечаний + Разница; 
		ИзменитьКоличествоЗамечанийВРодительскихСтроках(СтрокаРодителя.ПолучитьРодителя(), Разница);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьРезультатыПроверок() 
	
	Элементы.ПоказатьРезультатыПроверок.Пометка = Не Элементы.ПоказатьРезультатыПроверок.Пометка;
	ПоказатьРезультаты = Элементы.ПоказатьРезультатыПроверок.Пометка;
	
	Если ПоказатьРезультаты Тогда
		Если Элементы.ПоказатьСкрытьНастройки.Пометка Тогда
			Элементы.ПоказатьСкрытьНастройки.Пометка = Ложь;
			УправлениеВидимостьюНастроек();
		КонецЕсли;
		Элементы.Режимы.ТекущаяСтраница = Элементы.Режимы.ПодчиненныеЭлементы.РезультатыПроверок;
	Иначе
		Элементы.Режимы.ТекущаяСтраница = Элементы.Режимы.ПодчиненныеЭлементы.Проверка;
	КонецЕсли;
	
	Элементы.ПоказатьСкрытьНастройки.Доступность = Не ПоказатьРезультаты;
	Элементы.CodeReview.Видимость = Не ПоказатьРезультаты;
	Элементы.Каталог.Видимость = Не ПоказатьРезультаты;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюРезультатовПроверки()
	
	СохранятьВХранилище = (Объект.ВариантСохраненияРезультатовПроверки = 0);
	Элементы.ПоказатьРезультатыПроверок.Видимость = СохранятьВХранилище;
	
КонецПроцедуры

#КонецОбласти

#Область BSLLanguageServer

&НаКлиенте
Функция СоздатьКаталогВременныхФайлов()
	
	Каталог = КаталогВременныхФайлов + "temp_review";
	СоздатьКаталог(Каталог);
	
	Возврат Каталог;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТипОшибкиBSLLS(Серьезность)
	
	СоответствиеТипов = Новый Соответствие();
	СоответствиеТипов.Вставить("error", "error");
	СоответствиеТипов.Вставить("warning", "warning");
	СоответствиеТипов.Вставить("information", "info");
	СоответствиеТипов.Вставить("hint", "hint");
	
	ТипОшибки = СоответствиеТипов[НРег(Серьезность)];
	
	Если ТипОшибки = "error" И Объект.ОбрабатыватьОшибкиBSLLS Тогда
		Возврат ТипОшибки;
	ИначеЕсли ТипОшибки = "warning" И Объект.ОбрабатыватьПредупрежденияBSLLS Тогда
		Возврат ТипОшибки;
	ИначеЕсли ТипОшибки = "info" И Объект.ОбрабатыватьИнформациюBSLLS Тогда
		Возврат ТипОшибки;
	ИначеЕсли ТипОшибки = "hint" И Объект.ОбрабатыватьПодсказкиBSLLS Тогда
		Возврат ТипОшибки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьКаталогПроверкиДляBSLLS()
	
	Каталог = СоздатьКаталогВременныхФайлов();
	ТекущийОбъект = Элементы.ИзмененныеОбъекы.ТекущиеДанные;
	ИмяФайла = Каталог + РазделительПути + "Module.bsl";
	Файл = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	Файл.Записать(ТекущийОбъект.ТекущаяВерсия);
	Файл.Закрыть();
	
	Возврат Каталог;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКомандуЗапускаBSLLS(Каталог)
	
	КомандаЗапуска = Неопределено;
	
	Файлы = НайтиФайлы(Объект.РасположениеBSLLS, "bsl-language-server.exe", Истина);
	
	Если Файлы.Количество() = 0 Тогда
		Файлы = НайтиФайлы(Объект.РасположениеBSLLS, "bsl-language-server*.jar", Истина);
	КонецЕсли;
	
	Если 0 < Файлы.Количество() Тогда
		ИсполняемыйФайл = Файлы[0];
		КомандаЗапуска = Новый Структура();
		КомандаЗапуска.Вставить("Путь", ИсполняемыйФайл.Путь);
		СредаЗапуска = "";
		Если 0 < СтрНайти(НРег(ИсполняемыйФайл.Имя), ".jar", НаправлениеПоиска.СКонца) Тогда
			СредаЗапуска = "java -jar";
		КонецЕсли;
		Команда = СтрШаблон("%1 %2 analyze -s ""%3"" -o ""%3"" --reporter json", СредаЗапуска, ИсполняемыйФайл.ПолноеИмя, Каталог);
		КомандаЗапуска.Вставить("Команда", Команда);
	Иначе
		ТекстОшибки = НСтр("ru = 'В каталоге BSL Language Server не удалось найти исполняемый файл'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат КомандаЗапуска;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьАнализBSLLS()
	
	РезультатАнализа = Неопределено;
	
	Каталог = ПодготовитьКаталогПроверкиДляBSLLS();
	КомандаЗапуска = ПолучитьКомандуЗапускаBSLLS(Каталог);
	
	Если КомандаЗапуска <> Неопределено Тогда
		Результат = ЗапуститьКоманду(КомандаЗапуска.Команда, КомандаЗапуска.Путь);
		Если Результат.КодВозврата = 0 Тогда
			ЧтениеТекста = Новый ЧтениеТекста(Каталог + РазделительПути + "bsl-json.json", КодировкаТекста.UTF8);
			Текст = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			РезультатАнализа = ДесериализоватьJSON(Текст);
		Иначе
			ТекстОшибки = НСтр("ru = 'Во время анализа произошла ошибка:'") + Символы.ПС;
			ТекстОшибки = ТекстОшибки + Результат.ТекстВывода + Символы.ПС;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлы(Каталог);
	СостояниеАнализа = "";
	Состояние();
	
	Возврат РезультатАнализа;
	
КонецФункции

&НаКлиенте
Функция ЧислоВходитВДиапазон(Число, ДиапазонОт, ДиапазонДо)
	
	Возврат ДиапазонОт <= Число И Число <= ДиапазонДо;
	
КонецФункции

&НаКлиенте
Функция СтрокаВходитВИзмененныеДиапазоны(НомерСтроки, ИзмененныеДиапазоны)
	
	Входит = Ложь;
	Индекс = 0;
	
	Пока Индекс < ИзмененныеДиапазоны.Количество() И Не Входит Цикл
		Диапазон = ИзмененныеДиапазоны[Индекс];
		Входит = ЧислоВходитВДиапазон(НомерСтроки, Диапазон.НачальнаяСтрока, Диапазон.КонечнаяСтрока);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Входит;
	
КонецФункции

&НаКлиенте
Процедура УстановитьФильтрТаблицыЗамечанийBSLLS()
	
	Если Объект.ВариантФильтраЗамечанийBSLLS = 0 Тогда
		Отбор = Новый Структура("ИзмененныйБлок", Истина);
		Элементы.ЗамечанияBSLLS.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Элементы.ЗамечанияBSLLS.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуЗамечанийBSLLS(РезультатАнализа, ИзмененныеДиапазоны)
	
	ЗамечанияBSLLS.Очистить();
	
	Для Каждого Информация Из РезультатАнализа.fileinfos Цикл
		
		Для Каждого Проблема Из Информация.diagnostics Цикл
			
			ТипОшибки = ПолучитьТипОшибкиBSLLS(Проблема.severity);
			
			Если ТипОшибки <> Неопределено Тогда
				
				НомерСтроки = Проблема.Range.start.line + 1;
				НомерКолонки = Проблема.Range.start.character + 1;
				Сообщение = СтрШаблон("{%1, %2} %3", Формат(НомерСтроки, "ЧГ=0"), Формат(НомерКолонки, "ЧГ=0"), Проблема.message);
				СтрокаЗамечания = ЗамечанияBSLLS.Добавить();
				СтрокаЗамечания.Тип = ТипОшибки;
				СтрокаЗамечания.Сообщение = Сообщение;
				СтрокаЗамечания.НомерСтроки = НомерСтроки;
				СтрокаЗамечания.НомерКолонки = НомерКолонки;
				СтрокаЗамечания.ИзмененныйБлок = СтрокаВходитВИзмененныеДиапазоны(НомерСтроки, ИзмененныеДиапазоны);
				
				Если ТипОшибки = "error" Тогда
					СтрокаЗамечания.КартинкаСтроки = БиблиотекаКартинок.ОформлениеФлагКрасный;
				ИначеЕсли ТипОшибки = "warning" Тогда
					СтрокаЗамечания.КартинкаСтроки = БиблиотекаКартинок.ОформлениеФлагЖелтый;
					СтрокаЗамечания.Порядок = 1;
				ИначеЕсли ТипОшибки = "info" Тогда
					СтрокаЗамечания.КартинкаСтроки = БиблиотекаКартинок.ОформлениеФлагЗеленый;
					СтрокаЗамечания.Порядок = 2;
				ИначеЕсли ТипОшибки = "hint" Тогда
					СтрокаЗамечания.КартинкаСтроки = БиблиотекаКартинок.ПолеВводаВыбрать;
					СтрокаЗамечания.Порядок = 3;
				Иначе
					СтрокаЗамечания.КартинкаСтроки = Новый Картинка;
					СтрокаЗамечания.Порядок = 4;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗамечанияBSLLS.Сортировать("Порядок, НомерСтроки");
	УстановитьФильтрТаблицыЗамечанийBSLLS();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЗамечанияBSLLSВТаблицу(РезультатАнализа, ИзмененныеДиапазоны)
	
	Элементы.ПанельЗамечанияBSLLS.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЗамечанияBSLLSВВидеМаркеров(РезультатАнализа, ИзмененныеДиапазоны)
	
	Замечания = Новый Массив();
	СтроковыеЗамечания = Новый Массив();
	ЗамечанияПоСтрокам = Новый Соответствие();
	
	Для Каждого Информация Из РезультатАнализа.fileinfos Цикл
		
		Для Каждого Проблема Из Информация.diagnostics Цикл
			
			ТипОшибки = ПолучитьТипОшибкиBSLLS(Проблема.severity);
			
			Если ТипОшибки <> Неопределено Тогда
				
				НомерСтроки = Проблема.Range.start.line + 1;
				НомерКолонки = Проблема.Range.start.character + 1;
				
				Если Объект.ВариантФильтраЗамечанийBSLLS = 0 И Не СтрокаВходитВИзмененныеДиапазоны(НомерСтроки, ИзмененныеДиапазоны) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗамечанияПоСтрокам[НомерСтроки] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Проблема.code = "CognitiveComplexity" Или Проблема.code = "NestedStatements" Тогда
					Замечание = Новый Структура();
					Замечание.Вставить("lineNumber", НомерСтроки);
					Замечание.Вставить("startColumn", НомерКолонки);
					Замечание.Вставить("text", Проблема.message);
					СтроковыеЗамечания.Добавить(Замечание);
				Иначе
					Замечание = Новый Структура();
					Замечание.Вставить("lineNumber", НомерСтроки);
					Замечание.Вставить("startLineNumber", НомерСтроки);
					Замечание.Вставить("endLineNumber", Проблема.Range.end.line + 1);
					Замечание.Вставить("message", Проблема.message);
					Замечание.Вставить("severity", ТРег(ТипОшибки));
					Замечание.Вставить("startColumn", НомерКолонки);
					Замечание.Вставить("endColumn", Проблема.Range.end.character + 1);
					Замечание.Вставить("code", Проблема.code);
					Замечание.Вставить("source", Проблема.source);
					Замечания.Добавить(Замечание);
				КонецЕсли;
				
				ЗамечанияПоСтрокам[НомерСтроки] = Замечание;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	View().setCustomCodeLenses(СериализоватьJSON(СтроковыеЗамечания));
	View().setMarkers(СериализоватьJSON(Замечания));
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЗамечанияBSLLSВВидеCodeLens(РезультатАнализа, ИзмененныеДиапазоны)
	
	Замечания = Новый Массив();
	ЗамечанияПоСтрокам = Новый Соответствие();
	
	Для Каждого Информация Из РезультатАнализа.fileinfos Цикл
		
		Для Каждого Проблема Из Информация.diagnostics Цикл
			
			ТипОшибки = ПолучитьТипОшибкиBSLLS(Проблема.severity);
			
			Если ТипОшибки <> Неопределено Тогда
				
				НомерСтроки = Проблема.Range.start.line + 1;
				НомерКолонки = Проблема.Range.start.character + 1;
				
				Если Объект.ВариантФильтраЗамечанийBSLLS = 0 И Не СтрокаВходитВИзмененныеДиапазоны(НомерСтроки, ИзмененныеДиапазоны) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗамечанияПоСтрокам[НомерСтроки] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Замечание = Новый Структура();
				Замечание.Вставить("lineNumber", НомерСтроки);
				Замечание.Вставить("startColumn", НомерКолонки);
				Замечание.Вставить("text", Проблема.message);
				Замечания.Добавить(Замечание);
				
				ЗамечанияПоСтрокам[НомерСтроки] = Замечание;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	View().setCustomCodeLenses(СериализоватьJSON(ЗамечанияПоСтрокам));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоОбъектовПоДаннымBSLLS() Экспорт
	
	Замечания = ПолучитьЗамечания();
	КоличествоЗамечаний = Замечания.Количество();
	СтрокаОбъекта = ИзмененныеОбъекы.НайтиПоИдентификатору(Элементы.ИзмененныеОбъекы.ТекущаяСтрока);
	Разница = КоличествоЗамечаний - СтрокаОбъекта.КоличествоЗамечаний;
	СтрокаОбъекта.КоличествоЗамечаний = КоличествоЗамечаний;
	СтрокаОбъекта.Замечания = СериализоватьJSON(Замечания);
	ИзменитьКоличествоЗамечанийВРодительскихСтроках(СтрокаОбъекта.ПолучитьРодителя(), Разница);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЗамечанияBSLLSВСтандартномВиде(РезультатАнализа, ИзмененныеДиапазоны)
	
	Замечания = Новый Массив();
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	ЗамечанияПоСтрокам = Новый Соответствие();
	
	Для Каждого Информация Из РезультатАнализа.fileinfos Цикл
		
		Для Каждого Проблема Из Информация.diagnostics Цикл
			
			ТипОшибки = ПолучитьТипОшибкиBSLLS(Проблема.severity);
			
			Если ТипОшибки <> Неопределено Тогда
				
				НомерСтроки = Проблема.Range.start.line + 1;
				
				Если Объект.ВариантФильтраЗамечанийBSLLS = 0 И Не СтрокаВходитВИзмененныеДиапазоны(НомерСтроки, ИзмененныеДиапазоны) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗамечанияПоСтрокам[НомерСтроки] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Ссылка = СтрШаблон(" <a href=""%1"">%2</a>", Проблема.codeDescription.href, Проблема.code);
				Замечание = Новый Структура();
				Замечание.Вставить("author", Проблема.source + Ссылка);
				Замечание.Вставить("date", Формат(ДатаСеанса, "ДФ='dd.MM.yyyy HH:mm'"));
				Замечание.Вставить("severity", ТипОшибки);
				Замечание.Вставить("startLineNumber", НомерСтроки);
				Замечание.Вставить("endLineNumber", Проблема.Range.end.line);
				Замечание.Вставить("message", Проблема.message);
				Замечания.Добавить(Замечание);
				
				ЗамечанияПоСтрокам[НомерСтроки] = Замечание;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	КоличествоЗамечаний = Замечания.Количество();
	
	Если 0 < Замечания.Количество() Тогда
		View().setReviewIssues(СериализоватьJSON(Замечания));
		ПодключитьОбработчикОжидания("ПерейтиКПервомуЗамечанию", 0.1, Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДеревоОбъектовПоДаннымBSLLS", 0.1, Истина);
	ОбновитьБлокУправленияЗамечаниями();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИзмененныеДиапазоныКода()
	
	Диапазоны = Новый Массив();
	Изменения = View().getDifferences();
	
	Для Каждого Изменение Из Изменения Цикл
		
		Если ЗначениеЗаполнено(Изменение.modifiedStartLineNumber) Тогда
			Диапазон = Новый Структура();
			Диапазон.Вставить("НачальнаяСтрока", Изменение.modifiedStartLineNumber);
			Диапазон.Вставить("КонечнаяСтрока", Изменение.modifiedEndLineNumber);
			Диапазоны.Добавить(Диапазон);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Диапазоны;
	
КонецФункции

&НаКлиенте
Процедура ВывестиЗамечанияBSLLS(РезультатАнализа)
	
	ИзмененныеДиапазоны = ПолучитьИзмененныеДиапазоныКода(); 
	ЗаполнитьТаблицуЗамечанийBSLLS(РезультатАнализа, ИзмененныеДиапазоны);
	
	Если Объект.ВариантВыводаЗамечанияBSLLS = 0 Тогда
		ВывестиЗамечанияBSLLSВТаблицу(РезультатАнализа, ИзмененныеДиапазоны);
	ИначеЕсли Объект.ВариантВыводаЗамечанияBSLLS = 1 Тогда
		ВывестиЗамечанияBSLLSВСтандартномВиде(РезультатАнализа, ИзмененныеДиапазоны);
	ИначеЕсли Объект.ВариантВыводаЗамечанияBSLLS = 2 Тогда
		ВывестиЗамечанияBSLLSВВидеМаркеров(РезультатАнализа, ИзмененныеДиапазоны);
	Иначе
		ВывестиЗамечанияBSLLSВВидеCodeLens(РезультатАнализа, ИзмененныеДиапазоны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьАнализBSLLS() Экспорт
	
	РезультатАнализа = ВыполнитьАнализBSLLS();
	
	Если РезультатАнализа <> Неопределено Тогда
		ВывестиЗамечанияBSLLS(РезультатАнализа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбраныТипыОбрабатываемыхОшибокBSLLS()
	
	Возврат Объект.ОбрабатыватьОшибкиBSLLS Или
		Объект.ОбрабатыватьПредупрежденияBSLLS Или
		Объект.ОбрабатыватьИнформациюBSLLS Или
		Объект.ОбрабатыватьПодсказкиBSLLS;
	
КонецФункции

&НаКлиенте
Процедура НачатьПолучениеЗамечанийBSLLS()
	
	СостояниеАнализа = "Получение списка замечаний...";
	Состояние(СостояниеАнализа);
	ПодключитьОбработчикОжидания("ЗапуститьАнализBSLLS", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчисткиЗамечанийПриАнализеBSLLS(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьПолучениеЗамечанийBSLLS();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьАнализаBSLLS()

	АнализДоступен = Ложь;
	
	Если СтатусCodeReview = 1 Тогда
		
		Если ЗначениеЗаполнено(Объект.РасположениеBSLLS) Тогда
			Каталог = Новый Файл(Объект.РасположениеBSLLS);
			АнализДоступен = Каталог.Существует();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПолучитьЗамечанияBSLLS.Доступность = АнализДоступен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасположенияBSLLS()
	
	ОпределитьДоступностьАнализаBSLLS();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталогаBSLLSЗавершение(Каталог, ДопПараметры) Экспорт
	
	Если Каталог <> Неопределено И 0 < Каталог.Количество() Тогда
		Объект.РасположениеBSLLS = Каталог[0];
		ПриИзмененииРасположенияBSLLS();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВариантомЗагрузкиЗамечанийBSLLS()
	
	Элементы.ОбрабатыватьОшибкиBSLLS.Пометка = Объект.ОбрабатыватьОшибкиBSLLS;
	Элементы.ОбрабатыватьПредупрежденияBSLLS.Пометка = Объект.ОбрабатыватьПредупрежденияBSLLS;
	Элементы.ОбрабатыватьИнформациюBSLLS.Пометка = Объект.ОбрабатыватьИнформациюBSLLS;
	Элементы.ОбрабатыватьПодсказкиBSLLS.Пометка = Объект.ОбрабатыватьПодсказкиBSLLS;
	
КонецПроцедуры

#КонецОбласти